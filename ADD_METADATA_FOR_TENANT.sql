USE ROLE SYSADMIN;
CREATE or REPLACE PROCEDURE PLATFORM_DB.PROVISION_ROUTINE.ADD_METADATA_FOR_TENANT (
                                            P_TENANT_ABBREVIATION VARCHAR,
                                            P_SCHEMA_OBJECT_TYPE VARCHAR,
                                            P_DATABASETYPENAME VARCHAR
) 

RETURNS ARRAY  NOT NULL
LANGUAGE SQL
EXECUTE AS OWNER
AS
$$
DECLARE
    TENANT VARCHAR DEFAULT '';
    TENANT_ID VARCHAR DEFAULT '';
    SCHEMA_OBJECT_TYPE VARCHAR DEFAULT '';
    SCHEMA_TYPE_NAME   VARCHAR DEFAULT '';
    DATABASETYPENAME   VARCHAR DEFAULT '';
    
    JOB_NAME VARCHAR DEFAULT '';
    JOB_ACTION VARCHAR DEFAULT '';
    IS_ERROR VARCHAR DEFAULT '0';
    JOB_LOG_DESCRIPTION VARCHAR DEFAULT '';
    DATA_PRODUCT_TYPE VARCHAR DEFAULT '';
    
    LOG_AGG VARCHAR DEFAULT '';
    RETURN_LOG VARIANT DEFAULT '';
    LOG ARRAY DEFAULT [];
    LOGS VARCHAR DEFAULT '';
    
    META_SQL VARCHAR DEFAULT '';
    TENANT_EXCEPTION_PARAMETER EXCEPTION;
    WRAPPER_EXCEPTION EXCEPTION;
    INVALID_PARAMETERS_EXCEPTION EXCEPTION;
BEGIN
 
    TENANT := UPPER(P_TENANT_ABBREVIATION);
    SCHEMA_OBJECT_TYPE := UPPER(P_SCHEMA_OBJECT_TYPE);
    DATABASETYPENAME := UPPER(P_DATABASETYPENAME);    
    -- This check prevents prevents the above action by validating if the current user indeed has MAPS_DATA_ANALYTICS SYSADMIN role or not
    IF (
            P_SCHEMA_OBJECT_TYPE IS NULL OR TRIM(P_SCHEMA_OBJECT_TYPE) = '' OR
            P_TENANT_ABBREVIATION IS NULL OR TRIM(P_TENANT_ABBREVIATION)='' OR
            P_DATABASETYPENAME IS NULL OR TRIM(P_DATABASETYPENAME) = ''
        ) THEN
            RAISE INVALID_PARAMETERS_EXCEPTION;
    END IF; 


    -- Check if Tenant is part of the framework - Control Table
    LET CONTROL_TABLE CURSOR(p) FOR 
        SELECT TENANT_ID , TENANT_ABBREVIATION,DATA_PRODUCT_TYPE
               FROM PLATFORM_DB.PROVISION_APP.TENANT_LIST 
               WHERE TENANT_ABBREVIATION = ? AND ACTIVE = 'Y';
    
    OPEN CONTROL_TABLE USING (:TENANT);
    FOR ACTIVE_TENANT IN CONTROL_TABLE DO
        TENANT_ID := ACTIVE_TENANT.TENANT_ID;
        DATA_PRODUCT_TYPE := ACTIVE_TENANT.DATA_PRODUCT_TYPE;
    END FOR;
    CLOSE CONTROL_TABLE; 

    IF(TENANT_ID IS NULL OR TENANT_ID='' OR TENANT='') THEN
      RAISE TENANT_EXCEPTION_PARAMETER;
    END IF;

    
    

EXCEPTION
  WHEN INVALID_PARAMETERS_EXCEPTION  THEN
      IS_ERROR := '1';
      LOG_AGG := LOG_AGG || ' ERROR: INVALID PARAMETERS' ;
      RETURN_LOG := OBJECT_CONSTRUCT('tenant',:TENANT,'job_name',:JOB_NAME, 'job_log_description',:LOG_AGG, 'is_error', :IS_ERROR, 'action', :JOB_ACTION);
      CALL PLATFORM_DB.PROVISION_ROUTINE.LOG_JOB_DETAILS(:RETURN_LOG);
      RETURN RETURN_LOG;

  WHEN TENANT_EXCEPTION_PARAMETER  THEN
      IS_ERROR := '1';
      LOG_AGG := LOG_AGG || ' ERROR: COULD NOT RESOLVE TENANT' ;
      RETURN_LOG := OBJECT_CONSTRUCT('tenant',:TENANT,'job_name',:JOB_NAME, 'job_log_description',:LOG_AGG, 'is_error', :IS_ERROR, 'action', :JOB_ACTION);
      CALL PLATFORM_DB.PROVISION_ROUTINE.LOG_JOB_DETAILS(:RETURN_LOG);
      RETURN RETURN_LOG;
   
END;
$$;
 
