USE ROLE SYSADMIN;
CREATE or REPLACE PROCEDURE PLATFORM_DB.PROVISION_ROUTINE.ADD_METADATA_FOR_TENANT (
                                            P_TENANT_ABBREVIATION VARCHAR,
                                            P_SCHEMA_OBJECT_TYPE VARCHAR,
                                            P_DATABASETYPENAME VARCHAR
) 

RETURNS ARRAY  NOT NULL
LANGUAGE SQL
EXECUTE AS OWNER
AS
$$
DECLARE
    TENANT VARCHAR DEFAULT '';
    TENANT_ID VARCHAR DEFAULT '';
    SCHEMA_OBJECT_TYPE VARCHAR DEFAULT '';
    SCHEMA_TYPE_NAME   VARCHAR DEFAULT '';
    DATABASETYPENAME   VARCHAR DEFAULT '';
    
    JOB_NAME VARCHAR DEFAULT '';
    JOB_ACTION VARCHAR DEFAULT '';
    IS_ERROR VARCHAR DEFAULT '0';
    JOB_LOG_DESCRIPTION VARCHAR DEFAULT '';
    DATA_PRODUCT_TYPE VARCHAR DEFAULT '';
    
    LOG_AGG VARCHAR DEFAULT '';
    RETURN_LOG VARIANT DEFAULT '';
    LOG ARRAY DEFAULT [];
    LOGS VARCHAR DEFAULT '';
    
    META_SQL VARCHAR DEFAULT '';
    TENANT_EXCEPTION_PARAMETER EXCEPTION;
    WRAPPER_EXCEPTION EXCEPTION;
    INVALID_PARAMETERS_EXCEPTION EXCEPTION;
BEGIN
 
    TENANT := UPPER(P_TENANT_ABBREVIATION);
    SCHEMA_OBJECT_TYPE := UPPER(P_SCHEMA_OBJECT_TYPE);
    DATABASETYPENAME := UPPER(P_DATABASETYPENAME);    
    -- This check prevents prevents the above action by validating if the current user indeed has MAPS_DATA_ANALYTICS SYSADMIN role or not
    IF (
            P_SCHEMA_OBJECT_TYPE IS NULL OR TRIM(P_SCHEMA_OBJECT_TYPE) = '' OR
            P_TENANT_ABBREVIATION IS NULL OR TRIM(P_TENANT_ABBREVIATION)='' OR
            P_DATABASETYPENAME IS NULL OR TRIM(P_DATABASETYPENAME) = ''
        ) THEN
            RAISE INVALID_PARAMETERS_EXCEPTION;
    END IF; 


    -- Check if Tenant is part of the framework - Control Table
    LET CONTROL_TABLE CURSOR(p) FOR 
        SELECT TENANT_ID , TENANT_ABBREVIATION,DATA_PRODUCT_TYPE
               FROM PLATFORM_DB.PROVISION_APP.TENANT_LIST 
               WHERE TENANT_ABBREVIATION = ? AND ACTIVE = 'Y';
    
    OPEN CONTROL_TABLE USING (:TENANT);
    FOR ACTIVE_TENANT IN CONTROL_TABLE DO
        TENANT_ID := ACTIVE_TENANT.TENANT_ID;
        DATA_PRODUCT_TYPE := ACTIVE_TENANT.DATA_PRODUCT_TYPE;
    END FOR;
    CLOSE CONTROL_TABLE; 

    IF(TENANT_ID IS NULL OR TENANT_ID='' OR TENANT='') THEN
      RAISE TENANT_EXCEPTION_PARAMETER;
    END IF;

    -- SCHEMA_TYPE Add schema 
    INSERT INTO PLATFORM_DB.PROVISION_APP.SCHEMA_TYPE(DATABASETYPEID,SCHEMATYPENAME, SCHEMASHORTNAME, TENANT_ID)
    WITH DATABASETYPE_LIST AS (
       SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DATABASETYPE WHERE DATABASETYPENAME=:DATABASETYPENAME 
    )   
    SELECT DATABASETYPEID, :SCHEMA_OBJECT_TYPE as SCHEMA_OBJECT_TYPE, :TENANT_ID as TENANT_ID  FROM DATABASETYPE_LIST L
    WHERE NOT EXISTS (SELECT * FROM PLATFORM_DB.PROVISION_APP.SCHEMA_TYPE S WHERE S.SCHEMATYPENAME=:SCHEMA_OBJECT_TYPE
        AND S.DATABASETYPEID=L.DATABASETYPEID 
        AND S.TENANT_ID=:TENANT_ID ) ;
        

    
    ---  Building out the Role matrix.  These roles can be customized
    INSERT INTO PLATFORM_DB.PROVISION_APP.ROLE_MATRIX(DatabaseTypeID,SCHEMA_TYPEID,ROLENAME_TYPE, TENANT_ID )
    WITH DatabaseType_list as (
        SELECT DATABASETYPEID,DATABASETYPENAME FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME=:DATABASETYPENAME
    ),
    Schema_Type_list as ( SELECT SCHEMA_TYPEID FROM PLATFORM_DB.PROVISION_APP.Schema_Type
                     WHERE SchemaTypeName= :SCHEMA_OBJECT_TYPE
                    AND TENANT_ID = :TENANT_ID),
    Insert_list as (
        SELECT DATABASETYPEID,SCHEMA_TYPEID,'_FULL_ROLE' as ROLENAME_TYPE, :TENANT_ID as TENANT_ID  FROM DatabaseType_list,Schema_Type_list
            UNION
        SELECT DATABASETYPEID,SCHEMA_TYPEID,'_RW_ROLE' as ROLENAME_TYPE, :TENANT_ID  as TENANT_ID FROM DatabaseType_list,Schema_Type_list
            UNION
        SELECT DATABASETYPEID,SCHEMA_TYPEID,'_RO_ROLE' as ROLENAME_TYPE, :TENANT_ID  as TENANT_ID FROM DatabaseType_list,Schema_Type_list
    )
    SELECT DATABASETYPEID,SCHEMA_TYPEID,ROLENAME_TYPE,TENANT_ID FROM Insert_list I WHERE    NOT EXISTS 
         (SELECT DATABASETYPEID,SCHEMA_TYPEID ,ROLENAME_TYPE ,TENANT_ID
                                              FROM PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R 
     WHERE R.DATABASETYPEID=I.DATABASETYPEID and  R.SCHEMA_TYPEID= I.SCHEMA_TYPEID and R.TENANT_ID=I.TENANT_ID);
  
  /*  _MAIN_ROLE  */
    --USAGE
    INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
    WITH DatabaseType_list as (
       SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME=:DATABASETYPENAME
    ),
    Schema_Type_list as (
    SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
    WHERE SchemaTypeName= :SCHEMA_OBJECT_TYPE AND
     S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = :TENANT_ID) ,

    Role_matrix_list as (
    SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
    and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_MAIN_ROLE' AND R.TENANT_ID = :TENANT_ID)

    SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, :TENANT_ID FROM
    Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
    PRIVILEGE in ('USAGE') and ON_TAG in ('DATABASE','SCHEMA');

    --grant create table on schema to main role
    INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
    WITH DatabaseType_list as (
       SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME = :DATABASETYPENAME
    ),
    Schema_Type_list as (
    SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
    WHERE SchemaTypeName= :SCHEMA_OBJECT_TYPE AND
     S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = :TENANT_ID),
    Role_matrix_list as (
    SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
    and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_MAIN_ROLE' AND R.TENANT_ID = :TENANT_ID)
    SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, :TENANT_ID as TENANT_ID FROM
    Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
    PRIVILEGE in ('CREATE TABLE', 'CREATE VIEW', 'CREATE FUNCTION', 'CREATE PROCEDURE', 'CREATE PIPE',
    'CREATE STREAM', 'CREATE TASK', 'CREATE FILE FORMAT', 'CREATE SEQUENCE', 'CREATE STAGE','CREATE MATERIALIZED VIEW') and ON_TAG in ('SCHEMA')  ;

    -- grant DELETE, INSERT,  SELECT, TRUNCATE, UPDATE - TABLES (CURRENT & FUTURE) to main role
    INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
    WITH DatabaseType_list as (
       SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME = :DATABASETYPENAME
    ),
    Schema_Type_list as (
    SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
    WHERE SchemaTypeName= :SCHEMA_OBJECT_TYPE AND
     S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = :TENANT_ID),
    Role_matrix_list as (
    SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
    and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_MAIN_ROLE' AND R.TENANT_ID = :TENANT_ID)
    SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, :TENANT_ID FROM
    Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
    PRIVILEGE in ('DELETE','INSERT','SELECT','TRUNCATE','UPDATE') and ON_TAG in ('ALL TABLES','FUTURE TABLES');

    --MAIN ROLE - USAGE ON FUNCTIONS, PROCEDURES, SEQUENCE, STATE
    INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
    WITH DatabaseType_list as (
       SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME = :DATABASETYPENAME
    ),
    Schema_Type_list as (
    SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
    WHERE SchemaTypeName= :SCHEMA_OBJECT_TYPE  AND  S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = :TENANT_ID),
    Role_matrix_list as (
    SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
    and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_MAIN_ROLE' AND R.TENANT_ID = :TENANT_ID)
    SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, :TENANT_ID FROM
    Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
    PRIVILEGE in ('USAGE') and ON_TAG in ('ALL FILE FORMATS', 'FUTURE FILE FORMATS', 'ALL SEQUENCES', 'FUTURE SEQUENCES', 
    'ALL STAGES','FUTURE STAGES', 'ALL FUNCTIONS','FUTURE FUNCTIONS', 'ALL PROCEDURES', 'FUTURE PROCEDURES');

    --SELECT streams
    INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
    WITH DatabaseType_list as (
       SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME = :DATABASETYPENAME
    ),
    Schema_Type_list as (
    SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
    WHERE SchemaTypeName= :SCHEMA_OBJECT_TYPE AND
     S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = :TENANT_ID),
    Role_matrix_list as (
    SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
    and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_MAIN_ROLE' AND R.TENANT_ID = :TENANT_ID)
    SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, :TENANT_ID FROM
    Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
    PRIVILEGE in ('SELECT') and ON_TAG in ('ALL VIEWS','FUTURE VIEWS','ALL STREAMS','FUTURE STREAMS');

    --OPERATE ON PIPES streams
    --Bulk grant is not allowed on pipes - as of yet  - 'ALL PIPES','FUTURE PIPES',
    --below command is not ran
    --OPERATE ON  streams
    INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
    WITH DatabaseType_list as (
       SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME = :DATABASETYPENAME
    ),
    Schema_Type_list as (
    SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
    WHERE SchemaTypeName=:SCHEMA_OBJECT_TYPE AND
     S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = :TENANT_ID),
    Role_matrix_list as (
    SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
    and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_MAIN_ROLE' AND R.TENANT_ID = :TENANT_ID)
    SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, :TENANT_ID FROM
    Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
    PRIVILEGE in ('OPERATE') and ON_TAG in ('ALL TASKS','FUTURE TASKS');


    --SELECT on MATERIALIZED VIEWS
    INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
    WITH DatabaseType_list as (
       SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME = :DATABASETYPENAME
    ),
    Schema_Type_list as (
    SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
    WHERE SchemaTypeName= :SCHEMA_OBJECT_TYPE AND
     S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = :TENANT_ID),
    Role_matrix_list as (
    SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
    and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_MAIN_ROLE' AND R.TENANT_ID = :TENANT_ID)
    SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, :TENANT_ID FROM
    Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
    PRIVILEGE in ('SELECT') and ON_TAG in ('ALL MATERIALIZED VIEWS','FUTURE MATERIALIZED VIEWS');
 
    --OWNERSHIP
    INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
    WITH DatabaseType_list as (
       SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME = :DATABASETYPENAME
    ),
    Schema_Type_list as (
    SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
    WHERE SchemaTypeName= :SCHEMA_OBJECT_TYPE AND
     S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = :TENANT_ID),
    Role_matrix_list as (
    SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
    and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_MAIN_ROLE' AND R.TENANT_ID = :TENANT_ID)
    SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, :TENANT_ID FROM
    Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
    PRIVILEGE in ('OWNERSHIP') and ON_TAG in (
    'ALL TABLES','FUTURE TABLES',
    'ALL VIEWS','FUTURE VIEWS',
    'ALL FUNCTIONS','FUTURE FUNCTIONS',
    'ALL PROCEDURES','FUTURE PROCEDURES',
    'ALL PIPES','FUTURE PIPES',
    'ALL STREAMS','FUTURE STREAMS',
    'ALL FILE FORMATS','FUTURE FILE FORMATS',
    'ALL SEQUENCES','FUTURE SEQUENCES',
    'ALL STAGES','FUTURE STAGES',
    'ALL TASKS','FUTURE TASKS',
    'ALL MATERIALIZED VIEWS','FUTURE MATERIALIZED VIEWS'
    );
    
    /*  DML ROLE   */
    ---USAGE
    INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
    WITH DatabaseType_list as (
       SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME=:DATABASETYPENAME
    ),
    Schema_Type_list as (
    SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
    WHERE SchemaTypeName= :SCHEMA_OBJECT_TYPE AND
     S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = :TENANT_ID),
    Role_matrix_list as (
    SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
    and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_DML_ROLE' AND R.TENANT_ID = :TENANT_ID)
    SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, :TENANT_ID FROM
    Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
    PRIVILEGE in ('USAGE') and ON_TAG in ('DATABASE','SCHEMA');


    -- grant DELETE, INSERT,  SELECT, TRUNCATE, UPDATE - TABLES (CURRENT & FUTURE) to main role
    INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
    WITH DatabaseType_list as (
       SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME = :DATABASETYPENAME
    ),
    Schema_Type_list as (
    SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
    WHERE SchemaTypeName= :SCHEMA_OBJECT_TYPE AND
     S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = :TENANT_ID),
    Role_matrix_list as (
    SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
    and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_DML_ROLE' AND R.TENANT_ID = :TENANT_ID)
    SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, :TENANT_ID FROM
    Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
    PRIVILEGE in ('DELETE','INSERT','SELECT','TRUNCATE','UPDATE') and ON_TAG in ('ALL TABLES','FUTURE TABLES');


    --- USAGE ON FUNCTIONS, PROCEDURES, SEQUENCE, STATE
    INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
    WITH DatabaseType_list as (
       SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME = :DATABASETYPENAME
    ),
    Schema_Type_list as (
    SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
    WHERE SchemaTypeName= :SCHEMA_OBJECT_TYPE AND
     S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = :TENANT_ID),
    Role_matrix_list as (
    SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
    and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_DML_ROLE' AND R.TENANT_ID = :TENANT_ID)
    SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, :TENANT_ID FROM
    Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
    PRIVILEGE in ('USAGE') and ON_TAG in ('ALL FILE FORMATS', 'FUTURE FILE FORMATS', 'ALL SEQUENCES', 'FUTURE SEQUENCES', 'ALL STAGES','FUTURE STAGES', 'ALL FUNCTIONS','FUTURE FUNCTIONS', 'ALL PROCEDURES', 'FUTURE PROCEDURES');

    INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
    WITH DatabaseType_list as (
       SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME = :DATABASETYPENAME
    ),
    Schema_Type_list as (
    SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
    WHERE SchemaTypeName= :SCHEMA_OBJECT_TYPE AND
     S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = :TENANT_ID),
    Role_matrix_list as (
    SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
    and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_DML_ROLE' AND R.TENANT_ID = :TENANT_ID)
    SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, :TENANT_ID FROM
    Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
    PRIVILEGE in ('SELECT') and ON_TAG in ('ALL VIEWS','FUTURE VIEWS','ALL STREAMS','FUTURE STREAMS');

    --OPERATE ON streams
    --Bulk grant is not allowed on pipes - as of yet  - 'ALL PIPES','FUTURE PIPES',
    --below command is not ran
    --OPERATE ON  streams
    INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
    WITH DatabaseType_list as (
       SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME = :DATABASETYPENAME
    ),
    Schema_Type_list as (
    SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
    WHERE SchemaTypeName= :SCHEMA_OBJECT_TYPE AND
     S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = :TENANT_ID),
    Role_matrix_list as (
    SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
    and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_DML_ROLE' AND R.TENANT_ID = :TENANT_ID)
    SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, :TENANT_ID FROM
    Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
    PRIVILEGE in ('OPERATE') and ON_TAG in ('ALL TASKS','FUTURE TASKS');


    INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
    WITH DatabaseType_list as (
       SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME = :DATABASETYPENAME
    ),
    Schema_Type_list as (
    SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
    WHERE SchemaTypeName= :SCHEMA_OBJECT_TYPE AND
     S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = :TENANT_ID),
    Role_matrix_list as (
    SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
    and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_DML_ROLE' AND R.TENANT_ID = :TENANT_ID)
    SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, :TENANT_ID FROM
    Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
    PRIVILEGE in ('SELECT') and ON_TAG in ('ALL MATERIALIZED VIEWS','FUTURE MATERIALIZED VIEWS');

    /* READ ROLE   */
    INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
    WITH DatabaseType_list as (
       SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME=:DATABASETYPENAME
    ),
    Schema_Type_list as (
    SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
    WHERE SchemaTypeName= :SCHEMA_OBJECT_TYPE AND
     S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = :TENANT_ID),
    Role_matrix_list as (
    SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
    and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_READ_ROLE' AND R.TENANT_ID = :TENANT_ID)
    SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, :TENANT_ID FROM
    Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
    PRIVILEGE in ('USAGE') and ON_TAG in ('DATABASE','SCHEMA');

    -- grant DELETE, INSERT,  SELECT, TRUNCATE, UPDATE - TABLES (CURRENT & FUTURE) to main role
    INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
    WITH DatabaseType_list as (
       SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME = :DATABASETYPENAME
    ),
    Schema_Type_list as (
    SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
    WHERE SchemaTypeName= :SCHEMA_OBJECT_TYPE AND
     S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = :TENANT_ID),
    Role_matrix_list as (
    SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
    and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_READ_ROLE' AND R.TENANT_ID = :TENANT_ID)
    SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, :TENANT_ID FROM
    Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
    PRIVILEGE in ('SELECT') and ON_TAG in ('ALL TABLES','FUTURE TABLES');

    --MAIN ROLE - USAGE ON FUNCTIONS, PROCEDURES, SEQUENCE, STATE
    INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
    WITH DatabaseType_list as (
       SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME = :DATABASETYPENAME
    ),
    Schema_Type_list as (
    SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
    WHERE SchemaTypeName= :SCHEMA_OBJECT_TYPE AND
     S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = :TENANT_ID),
    Role_matrix_list as (
    SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
    and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_READ_ROLE' AND R.TENANT_ID = :TENANT_ID)
    SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, :TENANT_ID FROM
    Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
    PRIVILEGE in ('USAGE') and ON_TAG in ('ALL FILE FORMATS', 'FUTURE FILE FORMATS', 'ALL SEQUENCES', 'FUTURE SEQUENCES', 'ALL STAGES','FUTURE STAGES', 'ALL FUNCTIONS','FUTURE FUNCTIONS', 'ALL PROCEDURES', 'FUTURE PROCEDURES');


    --SELECT streams
    INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
    WITH DatabaseType_list as (
       SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME = :DATABASETYPENAME
    ),
    Schema_Type_list as (
    SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
    WHERE SchemaTypeName= :SCHEMA_OBJECT_TYPE AND
     S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = :TENANT_ID),
    Role_matrix_list as (
    SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
    and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_READ_ROLE' AND R.TENANT_ID = :TENANT_ID)
    SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, :TENANT_ID FROM
    Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
    PRIVILEGE in ('SELECT') and ON_TAG in ('ALL VIEWS','FUTURE VIEWS','ALL STREAMS','FUTURE STREAMS');

    --OPERATE ON streams
    --Bulk grant is not allowed on pipes - as of yet  - 'ALL PIPES','FUTURE PIPES',
    --below command is not ran
    --OPERATE ON  streams

    INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
    WITH DatabaseType_list as (
       SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME = :DATABASETYPENAME
    ),
    Schema_Type_list as (
    SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
    WHERE SchemaTypeName= :SCHEMA_OBJECT_TYPE AND
     S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = :TENANT_ID),
    Role_matrix_list as (
    SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
    and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_READ_ROLE' AND R.TENANT_ID = :TENANT_ID)
    SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, :TENANT_ID FROM
    Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
    PRIVILEGE in ('MONITOR') and ON_TAG in ('ALL TASKS','FUTURE TASKS');


    INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
    WITH DatabaseType_list as (
       SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME = :DATABASETYPENAME
    ),
    Schema_Type_list as (
    SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
    WHERE SchemaTypeName= :SCHEMA_OBJECT_TYPE AND
     S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = :TENANT_ID),
    Role_matrix_list as (
    SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
    and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_READ_ROLE' AND R.TENANT_ID = :TENANT_ID)
    SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, :TENANT_ID FROM
    Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
    PRIVILEGE in ('SELECT') and ON_TAG in ('ALL MATERIALIZED VIEWS','FUTURE MATERIALIZED VIEWS');




    
    
EXCEPTION
  WHEN INVALID_PARAMETERS_EXCEPTION  THEN
      IS_ERROR := '1';
      LOG_AGG := LOG_AGG || ' ERROR: INVALID PARAMETERS' ;
      RETURN_LOG := OBJECT_CONSTRUCT('tenant',:TENANT,'job_name',:JOB_NAME, 'job_log_description',:LOG_AGG, 'is_error', :IS_ERROR, 'action', :JOB_ACTION);
      CALL PLATFORM_DB.PROVISION_ROUTINE.LOG_JOB_DETAILS(:RETURN_LOG);
      RETURN RETURN_LOG;

  WHEN TENANT_EXCEPTION_PARAMETER  THEN
      IS_ERROR := '1';
      LOG_AGG := LOG_AGG || ' ERROR: COULD NOT RESOLVE TENANT' ;
      RETURN_LOG := OBJECT_CONSTRUCT('tenant',:TENANT,'job_name',:JOB_NAME, 'job_log_description',:LOG_AGG, 'is_error', :IS_ERROR, 'action', :JOB_ACTION);
      CALL PLATFORM_DB.PROVISION_ROUTINE.LOG_JOB_DETAILS(:RETURN_LOG);
      RETURN RETURN_LOG;
   
END;
$$;
 
