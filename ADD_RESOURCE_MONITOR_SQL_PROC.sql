USE ROLE ACCOUNTADMIN;
DROP PROCEDURE IF EXISTS PLATFORM_DB.PROVISION_ROUTINE.ADD_RESOURCE_MONITOR_WAREHOUSE_SQL_PROC(VARCHAR,VARCHAR,VARCHAR);
USE ROLE SYSADMIN;
CREATE or REPLACE PROCEDURE PLATFORM_DB.PROVISION_ROUTINE.ADD_RESOURCE_MONITOR_WAREHOUSE_SQL_PROC (WH_NAME VARCHAR(200), WH_MONITOR VARCHAR(20),TENANT_NAME_PARAMETER VARCHAR(20))
RETURNS ARRAY  NOT NULL
LANGUAGE SQL
EXECUTE AS   OWNER
AS
$$
DECLARE
   TENANT VARCHAR DEFAULT '';
   JOB_NAME VARCHAR DEFAULT '';
   JOB_ACTION VARCHAR DEFAULT '';
   IS_ERROR VARCHAR DEFAULT '0';
   JOB_LOG_DESCRIPTION VARCHAR;
   WH_SQL VARCHAR DEFAULT '';
   WH_EXCEPTION_PARAMETER EXCEPTION;
   LOG VARIANT DEFAULT '';
BEGIN

    IS_ERROR := '0';
    TENANT := TENANT_NAME_PARAMETER;
    
    IF (WH_NAME IS NULL OR WH_MONITOR IS NULL 
    --OR NOT STARTSWITH(WH_MONITOR,TENANT_NAME_PARAMETER)
    ) THEN
            RAISE WH_EXCEPTION_PARAMETER;
    ELSE
    WH_SQL:= ' ALTER  WAREHOUSE '|| WH_NAME  || ' SET RESOURCE_MONITOR='''|| WH_MONITOR  || ''''  ;
    EXECUTE IMMEDIATE WH_SQL;
    END IF;

    JOB_LOG_DESCRIPTION := '-- ' || WH_MONITOR ||' RESOURCE MONITOR ADDED TO WAREHOUSE : ' || WH_NAME || ' SQL: \n' || WH_SQL || ';';
    RETURN ARRAY_CONSTRUCT(:IS_ERROR,:JOB_LOG_DESCRIPTION)  ;

EXCEPTION
WHEN WH_EXCEPTION_PARAMETER  THEN
    IS_ERROR := '1';
    JOB_LOG_DESCRIPTION := 'ERROR: RESOURCE MONITOR ADD FAILED ' ||WH_MONITOR ;
    RETURN ARRAY_CONSTRUCT(:IS_ERROR,:JOB_LOG_DESCRIPTION)  ;

WHEN OTHER THEN
    IS_ERROR := '1';
    JOB_LOG_DESCRIPTION := 'SQLCODE:' || SQLCODE || ' SQLERRM:' || SQLERRM || ' SQLSTATE:' ||SQLSTATE;
    RETURN ARRAY_CONSTRUCT(:IS_ERROR,:JOB_LOG_DESCRIPTION)  ;

END;
$$;


GRANT OWNERSHIP ON PROCEDURE PLATFORM_DB.PROVISION_ROUTINE.ADD_RESOURCE_MONITOR_WAREHOUSE_SQL_PROC(VARCHAR,VARCHAR,VARCHAR) to role ACCOUNTADMIN;
USE ROLE ACCOUNTADMIN;
GRANT usage on procedure PLATFORM_DB.PROVISION_ROUTINE.ADD_RESOURCE_MONITOR_WAREHOUSE_SQL_PROC(VARCHAR,VARCHAR,VARCHAR) to role SYSADMIN;
