
USE ROLE ACCOUNTADMIN;

DROP PROCEDURE IF EXISTS PLATFORM_DB.PROVISION_ROUTINE.ALTER_STORAGE_INTEGRATION_SQL_PROC(VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR);
USE ROLE SYSADMIN;

CREATE or REPLACE PROCEDURE PLATFORM_DB.PROVISION_ROUTINE.ALTER_STORAGE_INTEGRATION_SQL_PROC (
        P_STORAGE_INTEGRATION_NAME VARCHAR,
        P_STORAGE_INTEGRATION_COMMENT VARCHAR,
        P_USER_COMMENT VARCHAR,
        P_ENABLED VARCHAR,
        P_STORAGE_AWS_ROLE_ARN VARCHAR,
        P_STORAGE_AWS_OBJECT_ACL VARCHAR,
        P_STORAGE_ALLOWED_LOCATIONS VARCHAR,
        P_STORAGE_BLOCKED_LOCATIONS VARCHAR,
        P_TENANT_NAME VARCHAR)

RETURNS ARRAY NOT NULL
LANGUAGE SQL
EXECUTE AS   OWNER
AS
$$
DECLARE
    TENANT VARCHAR DEFAULT '';
    IS_ERROR VARCHAR DEFAULT '0';
    SI_SQL VARCHAR DEFAULT '';
    JOB_LOG_DESCRIPTION VARCHAR DEFAULT '';
    STORAGE_INTEGRATION_EXCEPTION EXCEPTION;

    LOG VARIANT DEFAULT '';

BEGIN
    TENANT := P_TENANT_NAME;

    IF (NULLIF(TRIM(P_STORAGE_INTEGRATION_NAME), '') IS NOT NULL) THEN
      SI_SQL := 'ALTER STORAGE INTEGRATION '|| P_STORAGE_INTEGRATION_NAME || ' SET ';
    
    ELSE 
        RAISE STORAGE_INTEGRATION_EXCEPTION;
    END IF;

    IF ( NULLIF(TRIM(P_STORAGE_INTEGRATION_COMMENT), '') IS NOT NULL) THEN
        SI_SQL:= SI_SQL || ' COMMENT = '''|| P_STORAGE_INTEGRATION_COMMENT || '''';
    END IF;

    IF ( NULLIF(TRIM(P_ENABLED), '') IS NOT NULL) THEN
        SI_SQL:= SI_SQL || ' ENABLED = '|| P_ENABLED ;
    END IF;

    IF ( NULLIF(TRIM(P_STORAGE_AWS_ROLE_ARN ), '') IS NOT NULL) THEN
        SI_SQL:= SI_SQL || ' STORAGE_AWS_ROLE_ARN = '''|| P_STORAGE_AWS_ROLE_ARN || '''';
    END IF;

    IF ( NULLIF(TRIM(P_STORAGE_AWS_OBJECT_ACL ), '') IS NOT NULL) THEN
        SI_SQL:= SI_SQL || ' STORAGE_AWS_OBJECT_ACL = '''|| P_STORAGE_AWS_OBJECT_ACL || '''';
    END IF;
    
    IF ( NULLIF(TRIM(P_STORAGE_ALLOWED_LOCATIONS), '') IS NOT NULL) THEN
        SI_SQL:= SI_SQL || ' STORAGE_ALLOWED_LOCATIONS ='|| P_STORAGE_ALLOWED_LOCATIONS;
    END IF;

     IF ( NULLIF(TRIM(P_STORAGE_BLOCKED_LOCATIONS), '') IS NOT NULL) THEN
        SI_SQL:= SI_SQL || ' STORAGE_BLOCKED_LOCATIONS ='|| P_STORAGE_BLOCKED_LOCATIONS || ' ;';
    END IF;

    EXECUTE IMMEDIATE SI_SQL;
      
    JOB_LOG_DESCRIPTION :=  '-- STORAGE INTEGRATION ALTERED: ' || P_STORAGE_INTEGRATION_NAME || ' COMMENT: ' || P_USER_COMMENT || ' SQL: \n' || SI_SQL;
      
    RETURN ARRAY_CONSTRUCT(:IS_ERROR,:JOB_LOG_DESCRIPTION)  ;       

EXCEPTION

  WHEN STORAGE_INTEGRATION_EXCEPTION  THEN
    IS_ERROR := '1';
    JOB_LOG_DESCRIPTION := 'ERROR: INVALID PARAMETERS ' ||P_STORAGE_INTEGRATION_NAME || ' COMMENT: ' || P_USER_COMMENT;
    RETURN ARRAY_CONSTRUCT(:IS_ERROR,:JOB_LOG_DESCRIPTION)  ;

  WHEN OTHER THEN
    IS_ERROR := '1';
    JOB_LOG_DESCRIPTION := 'SQLCODE:' || SQLCODE || ' SQLERRM:' || SQLERRM || ' SQLSTATE:' ||SQLSTATE;
    RETURN ARRAY_CONSTRUCT(:IS_ERROR,:JOB_LOG_DESCRIPTION)  ;
END;
$$;

GRANT OWNERSHIP ON PROCEDURE PLATFORM_DB.PROVISION_ROUTINE.ALTER_STORAGE_INTEGRATION_SQL_PROC(VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR) TO ROLE ACCOUNTADMIN;

USE ROLE ACCOUNTADMIN;

GRANT USAGE ON PROCEDURE PLATFORM_DB.PROVISION_ROUTINE.ALTER_STORAGE_INTEGRATION_SQL_PROC(VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR) TO ROLE SYSADMIN;
