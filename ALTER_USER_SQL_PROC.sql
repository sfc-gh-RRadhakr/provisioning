USE ROLE SECURITYADMIN;
--DROP PROCEDURE PLATFORM_DB.PROVISION_ROUTINE.ALTER_USER_SQL_PROC (VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR);
DROP procedure IF EXISTS PLATFORM_DB.PROVISION_ROUTINE.ALTER_USER_SQL_PROC (VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR);
USE ROLE SYSADMIN  ;

    CREATE OR REPLACE PROCEDURE PLATFORM_DB.PROVISION_ROUTINE.ALTER_USER_SQL_PROC (
    P_USER_NAME VARCHAR,
    P_CREATE_USER_COMMENT VARCHAR,
    P_USER_COMMENT VARCHAR,
    P_PASSWORD VARCHAR,
    P_DEFAULT_WAREHOUSE VARCHAR,
    P_DEFAULT_ROLE VARCHAR,
    P_TENANT_NAME VARCHAR
)

RETURNS ARRAY NOT NULL
LANGUAGE SQL
EXECUTE AS OWNER
AS
$$
DECLARE
   TENANT VARCHAR DEFAULT '';
   JOB_NAME VARCHAR DEFAULT '';
   JOB_ACTION VARCHAR DEFAULT '';
   IS_ERROR VARCHAR DEFAULT '0';
   JOB_LOG_DESCRIPTION VARCHAR DEFAULT '';
   USER_EXCEPTION EXCEPTION;

   LOG VARIANT DEFAULT '';

    SCHEMA_SQL VARCHAR DEFAULT '';
    SCHEMA_TYPE  VARCHAR DEFAULT '';

BEGIN
    IS_ERROR := '0';

    LET ALTER_USER_SQL VARCHAR :='';
    IF ( NULLIF(TRIM(P_CREATE_USER_COMMENT ), '') IS NOT NULL) THEN
        ALTER_USER_SQL:= ALTER_USER_SQL || ' COMMENT='''||P_CREATE_USER_COMMENT ||'''' ;
    END IF;

    IF (NULLIF(TRIM(P_PASSWORD), '') IS NOT NULL) THEN
        ALTER_USER_SQL:= ALTER_USER_SQL || ' PASSWORD=''' ||P_PASSWORD ||'''' ;
    END IF;

    IF (NULLIF(TRIM(P_DEFAULT_WAREHOUSE), '') IS NOT NULL) THEN
        ALTER_USER_SQL:= ALTER_USER_SQL || ' DEFAULT_WAREHOUSE=' ||P_DEFAULT_WAREHOUSE ;
    END IF;

    IF (NULLIF(TRIM(P_DEFAULT_ROLE), '') IS NOT NULL) THEN
        ALTER_USER_SQL:= ALTER_USER_SQL || ' DEFAULT_ROLE=' ||P_DEFAULT_ROLE ;
    END IF;

    ALTER_USER_SQL := ' ALTER USER '|| P_USER_NAME || ' SET '||ALTER_USER_SQL || ';';

    EXECUTE IMMEDIATE ALTER_USER_SQL;
    
    JOB_LOG_DESCRIPTION := ' -- USER ALTERED: ' || P_USER_NAME || ' COMMENT: ' || P_USER_COMMENT || ' ALTER_USER_SQL : \n' || ALTER_USER_SQL;

    RETURN ARRAY_CONSTRUCT(:IS_ERROR,:JOB_LOG_DESCRIPTION)  ;

EXCEPTION

  
  WHEN USER_EXCEPTION  THEN
      IS_ERROR := '1';
      JOB_LOG_DESCRIPTION := 'ERROR: INVALID PARAMETERS' ||  ' COMMENT: ' || P_USER_COMMENT;
      RETURN ARRAY_CONSTRUCT(:IS_ERROR,:JOB_LOG_DESCRIPTION)  ;

  WHEN OTHER THEN
    IS_ERROR := '1';
    JOB_LOG_DESCRIPTION := 'SQLCODE:' || SQLCODE || ' SQLERRM:' || SQLERRM || ' SQLSTATE:' ||SQLSTATE;
    RETURN ARRAY_CONSTRUCT(:IS_ERROR,:JOB_LOG_DESCRIPTION)  ;
END;
$$;


grant ownership on procedure PLATFORM_DB.PROVISION_ROUTINE.ALTER_USER_SQL_PROC (VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR) to ROLE SECURITYADMIN;

USE ROLE SECURITYADMIN;
--DROP PROCEDURE PLATFORM_DB.PROVISION_ROUTINE.ALTER_USER_SQL_PROC (VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR);
grant USAGE on procedure PLATFORM_DB.PROVISION_ROUTINE.ALTER_USER_SQL_PROC (VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR)to ROLE SYSADMIN;
