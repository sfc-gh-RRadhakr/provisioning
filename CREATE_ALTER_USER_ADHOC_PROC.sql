USE ROLE SECURITYADMIN;
DROP PROCEDURE IF EXISTS PLATFORM_DB.PROVISION_ROUTINE.CREATE_ALTER_USER_ADHOC_SQL_PROC (VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR);

USE ROLE SYSADMIN;
CREATE or REPLACE PROCEDURE  PLATFORM_DB.PROVISION_ROUTINE.CREATE_ALTER_USER_ADHOC_SQL_PROC(
                P_ACTION VARCHAR,
                P_USER_NAME VARCHAR,
                P_FIRST_NAME VARCHAR,
                P_LAST_NAME VARCHAR,
                P_APPLE_DSID VARCHAR,
                P_USER_EMAIL VARCHAR,
                P_DEFAULT_ROLE VARCHAR, 
                P_DEFAULT_WAREHOUSE VARCHAR,
                P_USER_COMMENT VARCHAR,
                P_TICKET_NUMBER VARCHAR,              
                P_TENANT VARCHAR
)

RETURNS ARRAY NOT NULL
LANGUAGE SQL
EXECUTE AS   OWNER
AS
$$
DECLARE
    TENANT VARCHAR DEFAULT '';
    JOB_NAME VARCHAR DEFAULT '';
    JOB_ACTION VARCHAR DEFAULT '';
    IS_ERROR VARCHAR DEFAULT '0';
    JOB_LOG_DESCRIPTION VARCHAR DEFAULT '';
    INVALID_PARAMETERS_EXCEPTION EXCEPTION;
    
    USER_SQL VARCHAR DEFAULT '';
    LOG VARIANT DEFAULT '';

    V_USER_EXISTS INT DEFAULT 0;
    V_SQL STRING DEFAULT '';    

    V_LOG STRING;
    V_LOG_ACCOUNT_NAME STRING;
    V_LOG_STATUS STRING;
    V_LOG_CODE STRING;
    V_LOG_MESSAGE STRING;


    V_COMMENT STRING;
    V_SESSION_TAG STRING;
    V_USER_TYPE VARCHAR DEFAULT 'ADHOC';
    
BEGIN
    IF (P_ACTION = 'CREATE') THEN

        V_SQL := 'CREATE USER IF NOT EXISTS ' || P_USER_NAME
                    || ' LOGIN_NAME   = ''' || P_USER_EMAIL || ''''
                    || ' DISPLAY_NAME = ''' || P_FIRST_NAME || ' ' || P_LAST_NAME || ''''
                    || ' FIRST_NAME   = ''' || P_FIRST_NAME || ''''
                    || ' LAST_NAME    = ''' || P_LAST_NAME  || ''''
                    || ' EMAIL        = ''' || P_USER_EMAIL || ''''
                    || ' COMMENT      = ''' || P_USER_COMMENT    || ''''
                    || ' DEFAULT_WAREHOUSE = ''' ||  P_DEFAULT_WAREHOUSE || ''''
                    || ' DEFAULT_ROLE = ''' ||  P_DEFAULT_ROLE || ''''
                    || ' DEFAULT_SECONDARY_ROLES = ( ''ALL'' ) MUST_CHANGE_PASSWORD = FALSE';

        EXECUTE IMMEDIATE V_SQL;

        JOB_LOG_DESCRIPTION := ' -- USER CREATED: ' || ' CREATE USER SQL: \n' || V_SQL || ';\n';

        --V_SQL := 'GRANT OWNERSHIP ON USER ' || P_USER_NAME || ' TO ROLE SECURITYADMIN';
        --EXECUTE IMMEDIATE V_SQL;
        IF (P_DEFAULT_ROLE != '') THEN
          V_SQL := 'GRANT ROLE ' || P_DEFAULT_ROLE || ' TO USER ' || P_USER_NAME;
          EXECUTE IMMEDIATE V_SQL;
        END IF;  

         -- GRANT WAREHOUSE ROLE
        IF (P_DEFAULT_WAREHOUSE != '') THEN
          V_SQL := 'GRANT ROLE ' || P_DEFAULT_WAREHOUSE ||  '_ROLE TO USER ' || P_USER_NAME;
          EXECUTE IMMEDIATE V_SQL;
        END IF;

        JOB_LOG_DESCRIPTION := JOB_LOG_DESCRIPTION || ' -- ROLES GRANTED: ' || ' GRANT SQL: \n' || V_SQL || ';\n';

    END IF;



    IF (P_ACTION = 'ALTER') THEN

        V_SQL := 'ALTER USER IF EXISTS ' || P_USER_NAME || ' SET '
                    || ' LOGIN_NAME   = ''' || P_USER_EMAIL || ''''
                    || ' DISPLAY_NAME = ''' || P_FIRST_NAME || ' ' || P_LAST_NAME || ''''
                    || ' FIRST_NAME   = ''' || P_FIRST_NAME || ''''
                    || ' LAST_NAME    = ''' || P_LAST_NAME  || ''''
                    || ' EMAIL        = ''' || P_USER_EMAIL || ''''
                    || ' COMMENT      = ''' || P_USER_COMMENT    || ''''
                    || ' DEFAULT_WAREHOUSE = ''' ||  P_DEFAULT_WAREHOUSE || ''''
                    || ' DEFAULT_SECONDARY_ROLES = ( ''ALL'' ) MUST_CHANGE_PASSWORD = FALSE';

        EXECUTE IMMEDIATE V_SQL;

        JOB_LOG_DESCRIPTION := ' -- USER ALTERED: ' || ' ALTER USER SQL: \n' || V_SQL || ';\n';

        --V_SQL := 'GRANT OWNERSHIP ON USER ' || P_USER_NAME || ' TO ROLE SECURITYADMIN';
        --EXECUTE IMMEDIATE V_SQL;
        IF(P_DEFAULT_ROLE != '') THEN
          V_SQL := 'GRANT ROLE ' || P_DEFAULT_ROLE || ' TO USER ' || P_USER_NAME;
          EXECUTE IMMEDIATE V_SQL;
        END IF;
    
    -- GRANT WAREHOUSE ROLE
        IF(P_DEFAULT_WAREHOUSE != '') THEN
          V_SQL := 'GRANT ROLE ' || P_DEFAULT_WAREHOUSE ||  '_ROLE TO USER ' || P_USER_NAME;
          EXECUTE IMMEDIATE V_SQL;
        END IF;

        JOB_LOG_DESCRIPTION := JOB_LOG_DESCRIPTION || ' -- ROLES GRANTED: ' || ' GRANT SQL: \n' || V_SQL || ';\n';

    END IF;

      RETURN ARRAY_CONSTRUCT(:IS_ERROR,:JOB_LOG_DESCRIPTION)  ;
  
EXCEPTION
  WHEN INVALID_PARAMETERS_EXCEPTION  THEN
    IS_ERROR := '1';
    JOB_LOG_DESCRIPTION := 'ERROR:INCORRECT USER PARAMETERS' ; ;
    RETURN ARRAY_CONSTRUCT(:IS_ERROR,:JOB_LOG_DESCRIPTION)  ;
  WHEN OTHER THEN
    IS_ERROR := '1';
    JOB_LOG_DESCRIPTION := 'SQLCODE:' || SQLCODE || ' SQLERRM:' || SQLERRM || ' SQLSTATE:' ||SQLSTATE;
    RETURN ARRAY_CONSTRUCT(:IS_ERROR,:JOB_LOG_DESCRIPTION)  ;
END;
$$;


grant ownership on procedure PLATFORM_DB.PROVISION_ROUTINE.CREATE_ALTER_USER_ADHOC_SQL_PROC (VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR) to ROLE SECURITYADMIN;

USE ROLE SECURITYADMIN;
--DROP PROCEDURE PLATFORM_DB.PROVISION_ROUTINE.CREATE_USER_SQL_PROC (VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR);
grant USAGE on procedure PLATFORM_DB.PROVISION_ROUTINE.CREATE_ALTER_USER_ADHOC_SQL_PROC (VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR) to ROLE SYSADMIN;
