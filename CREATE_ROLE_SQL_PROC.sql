USE ROLE ACCOUNTADMIN;
DROP PROCEDURE IF EXISTS PLATFORM_DB.PROVISION_ROUTINE.CREATE_ROLE_SQL_PROC (VARCHAR,VARCHAR);
USE ROLE SYSADMIN;

CREATE or REPLACE PROCEDURE  PLATFORM_DB.PROVISION_ROUTINE.CREATE_ROLE_SQL_PROC(ROLE_NAME VARCHAR, TENANT_NAME_PARAMETER VARCHAR)

RETURNS ARRAY NOT NULL
LANGUAGE SQL
EXECUTE AS   OWNER
AS
$$
DECLARE

    TENANT VARCHAR DEFAULT '';
    JOB_NAME VARCHAR DEFAULT '';
    JOB_ACTION VARCHAR DEFAULT '';
    IS_ERROR VARCHAR DEFAULT '0';
    JOB_LOG_DESCRIPTION VARCHAR DEFAULT '';
    TENANT_EXCEPTION_PARAMETER EXCEPTION;
    ROLE_NAME_EXCEPTION EXCEPTION;
    ROLE_SQL VARCHAR DEFAULT '';
    AR_PREFIX STRING DEFAULT '_';

    LOG VARIANT DEFAULT '';

BEGIN

    IS_ERROR := '0';
    TENANT := TENANT_NAME_PARAMETER;
  
    IF (CONTAINS(ROLE_NAME, '_ROLE')) THEN
    ROLE_SQL :=  'CREATE ROLE IF NOT EXISTS ' ||ROLE_NAME;
    EXECUTE IMMEDIATE ROLE_SQL;
    EXECUTE IMMEDIATE 'GRANT ROLE '|| ROLE_NAME ||' TO ROLE ' || 'SYSADMIN';
    EXECUTE IMMEDIATE 'GRANT ROLE '|| ROLE_NAME ||' TO ROLE ' || TENANT_NAME_PARAMETER||'_SYSADMIN_ROLE';

    JOB_LOG_DESCRIPTION := '-- ROLE CREATED: '||ROLE_NAME  || '\n' || ROLE_SQL || ';\n';

    RETURN ARRAY_CONSTRUCT(:IS_ERROR,:JOB_LOG_DESCRIPTION)  ;

  ELSE
    RAISE ROLE_NAME_EXCEPTION;
  END IF ;

EXCEPTION

  WHEN ROLE_NAME_EXCEPTION  THEN
    IS_ERROR := '1';
    JOB_LOG_DESCRIPTION := 'ERROR:ROLE NAME NOT IN RIGHT FORMAT' ; ;
    RETURN ARRAY_CONSTRUCT(:IS_ERROR,:JOB_LOG_DESCRIPTION)  ;


  WHEN OTHER THEN
    IS_ERROR := '1';
    JOB_LOG_DESCRIPTION := 'SQLCODE:' || SQLCODE || ' SQLERRM:' || SQLERRM || ' SQLSTATE:' ||SQLSTATE;
    RETURN ARRAY_CONSTRUCT(:IS_ERROR,:JOB_LOG_DESCRIPTION)  ;

END;
$$;




grant ownership on procedure PLATFORM_DB.PROVISION_ROUTINE.CREATE_ROLE_SQL_PROC (VARCHAR,VARCHAR) to ROLE SECURITYADMIN;

USE ROLE SECURITYADMIN;
--DROP PROCEDURE PLATFORM_DB.PROVISION_ROUTINE.CREATE_ROLE_SQL_PROC (VARCHAR,VARCHAR);
grant USAGE on procedure PLATFORM_DB.PROVISION_ROUTINE.CREATE_ROLE_SQL_PROC (VARCHAR,VARCHAR) to ROLE SYSADMIN;

