USE ROLE SECURITYADMIN;
--DROP PROCEDURE PLATFORM_DB.PROVISION_ROUTINE.CREATE_USER_SQL_PROC (VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR);
drop procedure if exists PLATFORM_DB.PROVISION_ROUTINE.CREATE_USER_SQL_PROC (VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR);
USE ROLE SYSADMIN;
CREATE or REPLACE PROCEDURE  PLATFORM_DB.PROVISION_ROUTINE.CREATE_USER_SQL_PROC(
           USER_NAME_PARAMETER VARCHAR(200),  //1
           PASSWORD_PARAMETER VARCHAR(20), //2
           DEFAULT_WAREHOUSE_PARAMETER VARCHAR(200),//3
           DEFAULT_ROLE_PARAMETER VARCHAR(200), //4
           COMMENT_PARAMETER VARCHAR(200) //5
)
RETURNS ARRAY NOT NULL
LANGUAGE SQL
EXECUTE AS   OWNER
AS
$$ z
DECLARE
    TENANT VARCHAR DEFAULT '';
    JOB_NAME VARCHAR DEFAULT ''; 
    JOB_ACTION VARCHAR DEFAULT '';
    IS_ERROR VARCHAR DEFAULT '0';
    JOB_LOG_DESCRIPTION VARCHAR DEFAULT '';
    INVALID_PARAMETERS_EXCEPTION EXCEPTION;
    
    USER_SQL VARCHAR DEFAULT '';
    LOG VARIANT DEFAULT '';
BEGIN
    IS_ERROR := '0';
    IF (
        USER_NAME_PARAMETER IS NULL OR TRIM(USER_NAME_PARAMETER) = '' OR
       -- PASSWORD_PARAMETER IS NULL OR TRIM(PASSWORD_PARAMETER) = '' OR
       -- DEFAULT_WAREHOUSE_PARAMETER IS NULL OR TRIM(DEFAULT_WAREHOUSE_PARAMETER) = '' OR
      --  DEFAULT_ROLE_PARAMETER IS NULL OR TRIM(DEFAULT_ROLE_PARAMETER) = '' OR
        COMMENT_PARAMETER IS NULL OR TRIM(COMMENT_PARAMETER) = ''
        ) THEN
            RAISE INVALID_PARAMETERS_EXCEPTION;
    ELSE
      USER_SQL :=  'CREATE USER IF NOT EXISTS ' ||USER_NAME_PARAMETER || ' LOGIN_NAME =' || USER_NAME_PARAMETER || ' PASSWORD ='''|| PASSWORD_PARAMETER || ''' DISPLAY_NAME=' || USER_NAME_PARAMETER 
      || ' DEFAULT_SECONDARY_ROLES = (' || '''ALL'''||') MUST_CHANGE_PASSWORD = FALSE COMMENT =''' || COMMENT_PARAMETER||'''' ;
     -- USER_SQL :=  'CREATE USER IF NOT EXISTS ' ||USER_NAME_PARAMETER || ' LOGIN_NAME =' || USER_NAME_PARAMETER || ' PASSWORD ='''|| PASSWORD_PARAMETER || ''' DISPLAY_NAME=' || USER_NAME_PARAMETER 
      --|| ' DEFAULT_WAREHOUSE =' || DEFAULT_WAREHOUSE_PARAMETER || ' DEFAULT_ROLE =' || DEFAULT_ROLE_PARAMETER || ' DEFAULT_SECONDARY_ROLE = (' || '''ALL'''||') MUST_CHANGE_PASSWORD = FALSE COMMENT =''' || COMMENT_PARAMETER||'''' ;
      EXECUTE IMMEDIATE USER_SQL;
      JOB_LOG_DESCRIPTION := '-- USER CREATED: \n'||USER_SQL ||';'  ;
      RETURN ARRAY_CONSTRUCT(:IS_ERROR,:JOB_LOG_DESCRIPTION)  ;
    END IF;
  
EXCEPTION
  WHEN INVALID_PARAMETERS_EXCEPTION  THEN
    IS_ERROR := '1';
    JOB_LOG_DESCRIPTION := 'ERROR:INCORRECT USER PARAMETERS' ; ;
    RETURN ARRAY_CONSTRUCT(:IS_ERROR,:JOB_LOG_DESCRIPTION)  ;
  WHEN OTHER THEN
    IS_ERROR := '1';
    JOB_LOG_DESCRIPTION := 'SQLCODE:' || SQLCODE || ' SQLERRM:' || SQLERRM || ' SQLSTATE:' ||SQLSTATE;
    RETURN ARRAY_CONSTRUCT(:IS_ERROR,:JOB_LOG_DESCRIPTION)  ;
END;
$$;


grant ownership on procedure PLATFORM_DB.PROVISION_ROUTINE.CREATE_USER_SQL_PROC (VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR) to ROLE SECURITYADMIN;

USE ROLE SECURITYADMIN;
--DROP PROCEDURE PLATFORM_DB.PROVISION_ROUTINE.CREATE_USER_SQL_PROC (VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR);
grant USAGE on procedure PLATFORM_DB.PROVISION_ROUTINE.CREATE_USER_SQL_PROC (VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR) to ROLE SYSADMIN;
