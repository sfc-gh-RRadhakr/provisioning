USE ROLE SYSADMIN;

CREATE or REPLACE PROCEDURE PLATFORM_DB.PROVISION_ROUTINE.CREATE_WAREHOUSE_SQL_PROC (
                                                   WH_NAME VARCHAR(200),  //1
                                                   COMMENT VARCHAR(100), //2
                                                   WH_TAG VARCHAR,// 3
                                                   SIZE VARCHAR(20), //4
                                                   MAX VARCHAR(20),//5
                                                   MIN VARCHAR(20),//6
                                                   SCALING VARCHAR(20) ,//7
                                                   SUSPENDED VARCHAR(5),//8
                                                   TIMEOUT VARCHAR(5),    //9
                                                   STATEMENT_QUEUED VARCHAR, //10
                                                   TENANT_NAME_PARAMETER VARCHAR(20)    //11
                                                 )
RETURNS ARRAY  NOT NULL
LANGUAGE SQL
EXECUTE AS   OWNER
AS
$$

 DECLARE
   
   TENANT VARCHAR DEFAULT '';
   JOB_NAME VARCHAR DEFAULT '';
   JOB_ACTION VARCHAR DEFAULT '';
   IS_ERROR VARCHAR DEFAULT '';
   JOB_LOG_DESCRIPTION VARCHAR DEFAULT '';
   WH_EXCEPTION_PARAMETER  EXCEPTION;
   TENANT_EXCEPTION_PARAMETER EXCEPTION;
   WH_SQL VARCHAR DEFAULT '';
   WH_SIZE VARCHAR DEFAULT '';
   WH_MAX_CLUSTER_COUNT  VARCHAR DEFAULT '';
   WH_MIN_CLUSTER_COUNT  VARCHAR DEFAULT '';
   WH_SCALING_POLICY     VARCHAR DEFAULT '';
   WH_INITIALLY_SUSPENDED VARCHAR DEFAULT '';
   WH_AUTO_SUSPEND  VARCHAR DEFAULT '';
   WH_STATEMENT_TIMEOUT_IN_SECONDS VARCHAR DEFAULT '';
   WH_STATEMENT_QUEUED_IN_SECONDS VARCHAR DEFAULT '';
   AR_PREFIX STRING DEFAULT '_';
   ACCESS_ROLE VARCHAR DEFAULT '';
   LOG VARIANT DEFAULT '';

BEGIN

    IS_ERROR := '0';
  
    TENANT := TENANT_NAME_PARAMETER;
  
  IF (WH_NAME IS NULL OR WH_NAME = '' OR WH_NAME ='NULL' ) THEN
    RAISE WH_EXCEPTION_PARAMETER;

  -- Validate Naming Convention:{Tenant Abbreviation}_ObjectName_{ObjectType} 
  ELSEIF (TENANT IS NOT NULL AND STARTSWITH(WH_NAME,TENANT) AND ENDSWITH(WH_NAME,'_VWH') ) THEN
    WH_SIZE := IFNULL(IFF(TRIM(SIZE) = '',NULL,SIZE),'XSMALL');
    WH_MAX_CLUSTER_COUNT := IFNULL(IFF(TRIM(MAX)= '',NULL,MAX),'1');
    WH_MIN_CLUSTER_COUNT := IFNULL(IFF(TRIM(MIN)= '',NULL,MIN),'1');
    WH_SCALING_POLICY := IFNULL(IFF(TRIM(SCALING)= '',NULL,SCALING),'ECONOMY');
    WH_AUTO_SUSPEND := IFNULL(IFF(TRIM(SUSPENDED)= '',NULL,SUSPENDED),'60');
    WH_STATEMENT_TIMEOUT_IN_SECONDS := IFNULL(IFF(TRIM(TIMEOUT)= '',NULL,TIMEOUT),'600');
    WH_STATEMENT_QUEUED_IN_SECONDS := IFNULL(IFF(TRIM(STATEMENT_QUEUED)= '',NULL,STATEMENT_QUEUED),'14400');

   WH_SQL:= ' CREATE WAREHOUSE IF NOT EXISTS '|| WH_NAME || ' COMMENT=''' || COMMENT ||
        '''  WAREHOUSE_SIZE= '''|| WH_SIZE || ''' SCALING_POLICY= '''|| WH_SCALING_POLICY ||
        ''' MAX_CLUSTER_COUNT= ' ||  MAX ||' MIN_CLUSTER_COUNT= '|| MIN ||' AUTO_SUSPEND= '||WH_AUTO_SUSPEND ||
        ' STATEMENT_TIMEOUT_IN_SECONDS='|| WH_STATEMENT_TIMEOUT_IN_SECONDS || ' STATEMENT_QUEUED_TIMEOUT_IN_SECONDS='|| WH_STATEMENT_QUEUED_IN_SECONDS ;

    EXECUTE IMMEDIATE WH_SQL;
    JOB_LOG_DESCRIPTION := ' -- USER COMMENT: ' || COMMENT  || ' - ' || WH_NAME || ' WAREHOUSE CREATED ' || ' WH SQL: \n' || WH_SQL || ';\n';
    
  ELSE
    RAISE TENANT_EXCEPTION_PARAMETER;
  END IF;

RETURN ARRAY_CONSTRUCT(:IS_ERROR,:JOB_LOG_DESCRIPTION)  ;

EXCEPTION
  
  WHEN WH_EXCEPTION_PARAMETER  THEN
      IS_ERROR := '1';
      JOB_LOG_DESCRIPTION := 'ERROR: INVALID WAREHOUSE PARAMETERS' || WH_NAME ;
      RETURN ARRAY_CONSTRUCT(:IS_ERROR,:JOB_LOG_DESCRIPTION)  ;


  WHEN TENANT_EXCEPTION_PARAMETER  THEN
      IS_ERROR := '1';
      JOB_LOG_DESCRIPTION := 'ERROR: NAMING CONVENTION NOT FOLLOWED - ' || WH_NAME ;
      RETURN ARRAY_CONSTRUCT(:IS_ERROR,:JOB_LOG_DESCRIPTION)  ;  
  WHEN OTHER THEN
      IS_ERROR := '1';
      JOB_LOG_DESCRIPTION := 'SQLCODE:' || SQLCODE || ' SQLERRM:' || SQLERRM || ' SQLSTATE:' ||SQLSTATE;
      RETURN ARRAY_CONSTRUCT(:IS_ERROR,:JOB_LOG_DESCRIPTION)  ;    
      
END;
$$;
