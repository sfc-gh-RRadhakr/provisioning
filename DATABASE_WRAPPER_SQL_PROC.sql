/*
     Database Wrapper:
        Create / Alter Action
*/
USE ROLE SYSADMIN;

CREATE OR REPLACE PROCEDURE PLATFORM_DB.PROVISION_ROUTINE.DATABASE_WRAPPER(
    P_ACTION VARCHAR,
    P_DB_NAME VARCHAR,
    P_DB_TYPE VARCHAR,
    P_DB_COMMENT VARCHAR,
    P_USER_COMMENT VARCHAR,
    P_DATA_RETENTION_TIME_IN_DAYS VARCHAR,
    P_TENANT_NAME VARCHAR
)

RETURNS VARIANT  NOT NULL
LANGUAGE SQL
EXECUTE AS OWNER
AS
$$

DECLARE
    JOB_NAME VARCHAR DEFAULT '';
    JOB_ACTION VARCHAR DEFAULT '';
    TENANT VARCHAR DEFAULT '';
    
    TENANT_ID VARCHAR DEFAULT '';
    DATA_PRODUCT_TYPE VARCHAR DEFAULT '';

    IS_ERROR VARCHAR DEFAULT '';
    JOB_LOG_DESCRIPTION VARCHAR DEFAULT '';
    TENANT_EXCEPTION_PARAMETER EXCEPTION;
    WRAPPER_EXCEPTION EXCEPTION;
    INVALID_PARAMETERS_EXCEPTION EXCEPTION;
    ACTION_EXCEPTION EXCEPTION;
    
    SYSADMIN_SUFFIX VARCHAR DEFAULT '_SYSADMIN_ROLE';
    LOCAL_SYSADMIN_ROLE VARCHAR DEFAULT '';
    ROLE_NAME VARCHAR DEFAULT '';
    PERMISSION_EXISTS INTEGER DEFAULT 0;
    SP_RETURN_LOG VARCHAR DEFAULT '';

    LOG_AGG VARCHAR DEFAULT '';
    RETURN_LOG VARIANT DEFAULT '';
    LOG ARRAY DEFAULT [];
    LOGS VARCHAR DEFAULT '';
    
    
BEGIN
    JOB_NAME := 'DATABASE_WRAPPER';
    IS_ERROR := '0';
    
    IF(P_TENANT_NAME IS NULL OR TRIM(P_TENANT_NAME) ='') THEN
        RAISE TENANT_EXCEPTION_PARAMETER;
    END IF;
    
    TENANT := UPPER(P_TENANT_NAME);
    
    LOCAL_SYSADMIN_ROLE := TENANT || SYSADMIN_SUFFIX;
    
    -- Does the current user have the permissions to invoke this SP
    -- Ex: I could be MAPS_EVAL Sysadmin and invoke the SP to create a MAPS_DATA_ANALYTICS_{CORE}_DB
    -- This check prevents prevents the above action by validating if the current user indeed has MAPS_DATA_ANALYTICS SYSADMIN role or not
    IF (P_ACTION IS NULL OR TRIM(P_ACTION) = '' OR
        P_DB_NAME IS NULL OR TRIM(P_DB_NAME) = '' OR
        P_DB_TYPE IS NULL OR TRIM(P_DB_TYPE)='' OR
        P_DB_COMMENT IS NULL OR TRIM(P_DB_COMMENT) = '' OR
        P_USER_COMMENT IS NULL OR TRIM(P_USER_COMMENT) = '' OR
        P_DATA_RETENTION_TIME_IN_DAYS IS NULL OR TRIM(P_DATA_RETENTION_TIME_IN_DAYS) = '' OR
        NOT IS_ROLE_IN_SESSION(LOCAL_SYSADMIN_ROLE) OR
        NOT STARTSWITH(UPPER(P_DB_NAME), TENANT)
        ) THEN
            RAISE INVALID_PARAMETERS_EXCEPTION;
    END IF;
    
--CHECK USERS CURRENT AVAILABLE ROLES [IF SYSADMIN THEN USE SYSADMIN, ELSE LOCAL_SYSADMIN_ROLE]
    P_DB_NAME := UPPER(P_DB_NAME);
    P_DB_TYPE := UPPER(P_DB_TYPE);

    IF(CONTAINS(REPLACE(CURRENT_AVAILABLE_ROLES(),'_SYSADMIN_ROLE',''),'SYSADMIN')) THEN
        ROLE_NAME := 'SYSADMIN';
    ELSE
        ROLE_NAME := LOCAL_SYSADMIN_ROLE;
    END IF;
    
    JOB_ACTION := UPPER(P_ACTION);

    -- Check if Tenant is part of the framework - Control Table
    LET CONTROL_TABLE CURSOR(p) FOR 
        SELECT TENANT_ID , TENANT_ABBREVIATION,DATA_PRODUCT_TYPE
               FROM PLATFORM_DB.PROVISION_APP.TENANT_LIST 
               WHERE TENANT_ABBREVIATION = ? AND ACTIVE = 'Y';
    
    OPEN CONTROL_TABLE USING (:TENANT);
    FOR ACTIVE_TENANT IN CONTROL_TABLE DO
        TENANT_ID := ACTIVE_TENANT.TENANT_ID;
        DATA_PRODUCT_TYPE := ACTIVE_TENANT.DATA_PRODUCT_TYPE;
    END FOR;
    CLOSE CONTROL_TABLE; 
    IF(TENANT_ID IS NULL) THEN
      RAISE TENANT_EXCEPTION_PARAMETER;
    END IF;

    IF(TENANT IS NULL) THEN
      RAISE TENANT_EXCEPTION_PARAMETER;
    END IF;

    PERMISSION_EXISTS := (SELECT
        CASE        
            WHEN EXISTS (SELECT 1 FROM PLATFORM_DB.PROVISION_APP.SP_CONTROL CTL 
                INNER JOIN PLATFORM_DB.PROVISION_APP.SP_LIST L ON L.SP_ID = CTL.SP_ID 
            WHERE CTL.ADMIN_ROLE = :ROLE_NAME AND L.SP_NAME = 'DATABASE_WRAPPER' AND L.SP_ACTION = :JOB_ACTION) THEN 1
        ELSE 0
    END AS PERMISSION_EXISTS);

    -- CREATE DATABASE
    IF (JOB_ACTION = 'CREATE' AND PERMISSION_EXISTS = 1) THEN
       LOG := (CALL PLATFORM_DB.PROVISION_ROUTINE.CREATE_DATABASE_SQL_PROC(:P_DB_NAME,:P_DB_COMMENT,:P_USER_COMMENT,:P_DATA_RETENTION_TIME_IN_DAYS,:TENANT));
       LOG_AGG := LOG_AGG || LOG[1];
       IF(LOG[0]='1') THEN 
        RAISE ACTION_EXCEPTION;
        END IF;
    SP_RETURN_LOG := ' DATABASE CREATED : ' || P_DB_NAME || ', ';
    LET DB_ROLE_LIST CURSOR(p) FOR 
    SELECT  DISTINCT ROLENAME_TYPE  
            FROM PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R 
            INNER JOIN PLATFORM_DB.PROVISION_APP.DatabaseType D  
                ON  D.DATABASETYPEID=R.DATABASETYPEID 
            INNER JOIN PLATFORM_DB.PROVISION_APP.Schema_Type  S  
                ON  S.SCHEMA_TYPEID=R.SCHEMA_TYPEID AND S.DATABASETYPEID=R.DATABASETYPEID 
            WHERE  DATABASETYPENAME = ?  AND  R.TENANT_ID = ?;

    OPEN DB_ROLE_LIST USING (:P_DB_TYPE,  :TENANT_ID);
        FOR R IN DB_ROLE_LIST DO
        LET BU_TARGET_ROLE_NAME_ALL VARCHAR := P_DB_NAME || '_ALL'|| R.ROLENAME_TYPE;
        LET BU_USAGE_SQL VARCHAR := 'GRANT USAGE ON DATABASE ' || P_DB_NAME || ' TO ROLE ' ||  BU_TARGET_ROLE_NAME_ALL;
                    
        LOG := (CALL PLATFORM_DB.PROVISION_ROUTINE.CREATE_ROLE_SQL_PROC(:BU_TARGET_ROLE_NAME_ALL, :TENANT));
                    
        LOG_AGG := LOG_AGG || LOG[1] || '\n';
                    
        IF(LOG[0] = '1') THEN
            IS_ERROR := '1';
            RAISE WRAPPER_EXCEPTION;
        END IF;
        SP_RETURN_LOG := SP_RETURN_LOG || ' ROLE CREATED : ' || BU_TARGET_ROLE_NAME_ALL || ', ';
            
        END FOR;
    CLOSE DB_ROLE_LIST;

    /* 
    --------------------------------------------------  Convert into metadata driven ------------------------------------------------------------ 
    --  ALL  READ ROLE
    LET BU_TARGET_ROLE_NAME_ALL_READ_ROLE VARCHAR := P_DB_NAME || '_ALL_READ_ROLE';
    LET BU_USAGE_SQL VARCHAR := 'GRANT USAGE ON DATABASE ' || P_DB_NAME || ' TO ROLE ' ||  BU_TARGET_ROLE_NAME_ALL_READ_ROLE;
                    
    LOG := (CALL PLATFORM_DB.PROVISION_ROUTINE.CREATE_ROLE_SQL_PROC(:BU_TARGET_ROLE_NAME_ALL_READ_ROLE, :TENANT));
                    
    LOG_AGG := LOG_AGG || LOG[1] || '\n';
                    
    IF(LOG[0] = '1') THEN
        IS_ERROR := '1';
        RAISE WRAPPER_EXCEPTION;
    END IF;
    SP_RETURN_LOG := SP_RETURN_LOG || ' ROLE CREATED : ' || BU_TARGET_ROLE_NAME_ALL_READ_ROLE || ', ';

    -- ALL_DML_ROLE
    LET BU_TARGET_ROLE_NAME_ALL_DML_ROLE VARCHAR := P_DB_NAME || '_ALL_DML_ROLE';
    BU_USAGE_SQL  := 'GRANT USAGE ON DATABASE ' || P_DB_NAME || ' TO ROLE ' ||  BU_TARGET_ROLE_NAME_ALL_DML_ROLE;
                    
    LOG := (CALL PLATFORM_DB.PROVISION_ROUTINE.CREATE_ROLE_SQL_PROC(:BU_TARGET_ROLE_NAME_ALL_DML_ROLE, :TENANT));
                    
    LOG_AGG := LOG_AGG || LOG[1] || '\n';
                    
    IF(LOG[0] = '1') THEN
        IS_ERROR := '1';
        RAISE WRAPPER_EXCEPTION;
    END IF;
    SP_RETURN_LOG := SP_RETURN_LOG || ' ROLE CREATED : ' || BU_TARGET_ROLE_NAME_ALL_DML_ROLE || ', ';

    -- ALL_MAIN_ROLE
    LET BU_TARGET_ROLE_NAME_ALL_MAIN_ROLE VARCHAR := P_DB_NAME || '_ALL_MAIN_ROLE';
    BU_USAGE_SQL  := 'GRANT USAGE ON DATABASE ' || P_DB_NAME || ' TO ROLE ' ||  BU_TARGET_ROLE_NAME_ALL_MAIN_ROLE;
                    
    LOG := (CALL PLATFORM_DB.PROVISION_ROUTINE.CREATE_ROLE_SQL_PROC(:BU_TARGET_ROLE_NAME_ALL_MAIN_ROLE, :TENANT));
                    
    LOG_AGG := LOG_AGG || LOG[1] || '\n';
                    
    IF(LOG[0] = '1') THEN
        IS_ERROR := '1';
        RAISE WRAPPER_EXCEPTION;
    END IF;

    SP_RETURN_LOG := SP_RETURN_LOG || ' ROLE CREATED : ' || BU_TARGET_ROLE_NAME_ALL_MAIN_ROLE || ', ';


    LOG := (CALL PLATFORM_DB.PROVISION_ROUTINE.GRANT_ROLE_SQL_PROC(:BU_USAGE_SQL));
    LOG_AGG := LOG_AGG || LOG[1] || '\n';
                    
    IF(LOG[0] = '1') THEN
        IS_ERROR := '1';
        RAISE WRAPPER_EXCEPTION;
    END IF;
    --------------------------------------------------  Convert into metadata driven ------------------------------------------------------------ 
    */
    -- ALTER Database
    ELSEIF (JOB_ACTION = 'ALTER' AND PERMISSION_EXISTS = 1) THEN
      LOG :=  (CALL PLATFORM_DB.PROVISION_ROUTINE.ALTER_DATABASE_SQL_PROC(:P_DB_NAME,:P_DB_COMMENT,:P_USER_COMMENT,:P_DATA_RETENTION_TIME_IN_DAYS,:TENANT));
      LOG_AGG := LOG_AGG || LOG[1];
        IF(LOG[0]='1') THEN 
        RAISE ACTION_EXCEPTION;
        END IF;
        SP_RETURN_LOG := 'DATABASE ALTERED : ' || P_DB_NAME;
    
    ELSE
       IS_ERROR := '1';
       LOG_AGG := LOG_AGG || 'INVALID ACTION';
    END IF;
    
    RETURN_LOG := OBJECT_CONSTRUCT('tenant',:TENANT,'job_name',:JOB_NAME, 'job_log_description',:SP_RETURN_LOG, 'is_error', :IS_ERROR, 'action', :JOB_ACTION);
    CALL PLATFORM_DB.PROVISION_ROUTINE.LOG_JOB_DETAILS(OBJECT_CONSTRUCT('tenant',:TENANT,'job_name',:JOB_NAME, 'job_log_description',:LOG_AGG, 'is_error', :IS_ERROR, 'action', :JOB_ACTION));
    
    RETURN RETURN_LOG;

EXCEPTION
  WHEN INVALID_PARAMETERS_EXCEPTION  THEN
      IS_ERROR := '1';
      LOG_AGG := LOG_AGG || ' ERROR: INVALID PARAMETERS' ;
      RETURN_LOG := OBJECT_CONSTRUCT('tenant',:TENANT,'job_name',:JOB_NAME, 'job_log_description',:LOG_AGG, 'is_error', :IS_ERROR, 'action', :JOB_ACTION);
      CALL PLATFORM_DB.PROVISION_ROUTINE.LOG_JOB_DETAILS(:RETURN_LOG);
      RETURN RETURN_LOG;

  WHEN TENANT_EXCEPTION_PARAMETER  THEN
      IS_ERROR := '1';
      LOG_AGG := LOG_AGG || ' ERROR: COULD NOT RESOLVE TENANT' ;
      RETURN_LOG := OBJECT_CONSTRUCT('tenant',:TENANT,'job_name',:JOB_NAME, 'job_log_description',:LOG_AGG, 'is_error', :IS_ERROR, 'action', :JOB_ACTION);
      CALL PLATFORM_DB.PROVISION_ROUTINE.LOG_JOB_DETAILS(:RETURN_LOG);
      RETURN RETURN_LOG;
   
   WHEN ACTION_EXCEPTION  THEN
      IS_ERROR := '1';
      RETURN_LOG := OBJECT_CONSTRUCT('tenant',:TENANT,'job_name',:JOB_NAME, 'job_log_description',:LOG_AGG, 'is_error', :IS_ERROR, 'action', :JOB_ACTION);
      CALL PLATFORM_DB.PROVISION_ROUTINE.LOG_JOB_DETAILS(:RETURN_LOG);
      RETURN RETURN_LOG;

  WHEN WRAPPER_EXCEPTION  THEN
      IS_ERROR := '1';
      JOB_LOG_DESCRIPTION := 'ERROR: DATABASE WRAPPER FAILED ' || LOG_AGG ;
      RETURN_LOG := OBJECT_CONSTRUCT('tenant',:TENANT,'job_name',:JOB_NAME, 'job_log_description',:JOB_LOG_DESCRIPTION, 'is_error', :IS_ERROR, 'action', :JOB_ACTION);
      CALL PLATFORM_DB.PROVISION_ROUTINE.LOG_JOB_DETAILS(:RETURN_LOG);
      RETURN RETURN_LOG;
      
  WHEN OTHER THEN
      IS_ERROR := '1';
      LOG_AGG := LOG_AGG ||'SQLCODE:' || SQLCODE || ' SQLERRM:' || SQLERRM || ' SQLSTATE:' ||SQLSTATE || LOG_AGG;
      RETURN_LOG := OBJECT_CONSTRUCT('tenant',:TENANT,'job_name',:JOB_NAME, 'job_log_description',:LOG_AGG, 'is_error', :IS_ERROR, 'action', :JOB_ACTION);
      CALL PLATFORM_DB.PROVISION_ROUTINE.LOG_JOB_DETAILS(:RETURN_LOG);
      RETURN RETURN_LOG;


END;
$$;



GRANT USAGE ON PROCEDURE PLATFORM_DB.PROVISION_ROUTINE.DATABASE_WRAPPER(VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR) TO ROLE PLATFORM_DB_PROVISION_ROUTINE_USAGE_ROLE;


/*
     Database Wrapper:
        Drop Action
*/

USE ROLE SYSADMIN;
CREATE OR REPLACE PROCEDURE PLATFORM_DB.PROVISION_ROUTINE.DATABASE_WRAPPER(
    P_ACTION VARCHAR,
    P_DB_NAME VARCHAR,
    P_USER_COMMENT VARCHAR, //3
    P_TENANT_NAME VARCHAR
)

RETURNS VARIANT  NOT NULL
LANGUAGE SQL
EXECUTE AS OWNER
AS
$$

DECLARE
    JOB_NAME VARCHAR;
    JOB_ACTION VARCHAR;
    TENANT VARCHAR DEFAULT '';
    IS_ERROR VARCHAR;
    JOB_LOG_DESCRIPTION VARCHAR DEFAULT '';
    TENANT_EXCEPTION_PARAMETER EXCEPTION;
    WRAPPER_EXCEPTION EXCEPTION;
    INVALID_PARAMETERS_EXCEPTION EXCEPTION;
    ACTION_EXCEPTION EXCEPTION;
    
    SYSADMIN_SUFFIX VARCHAR DEFAULT '_SYSADMIN_ROLE';
    LOCAL_SYSADMIN_ROLE VARCHAR;
    ROLE_NAME VARCHAR DEFAULT '';
    PERMISSION_EXISTS INTEGER;
    SP_RETURN_LOG VARCHAR DEFAULT '';

    LOG_AGG VARCHAR DEFAULT '';
    RETURN_LOG VARIANT;
    LOG ARRAY;
    LOGS VARCHAR DEFAULT '';

BEGIN
    JOB_NAME := 'DATABASE_WRAPPER';
    IS_ERROR := '0';
    
    IF(P_TENANT_NAME IS NULL OR TRIM(P_TENANT_NAME) ='') THEN
        RAISE TENANT_EXCEPTION_PARAMETER;
    END IF;
    
    TENANT := UPPER(P_TENANT_NAME);

    LOCAL_SYSADMIN_ROLE := TENANT || SYSADMIN_SUFFIX;

    IF (
        P_ACTION IS NULL OR TRIM(P_ACTION) = '' OR
        P_DB_NAME IS NULL OR TRIM(P_DB_NAME) = '' OR
        NOT IS_ROLE_IN_SESSION(LOCAL_SYSADMIN_ROLE) OR
        P_USER_COMMENT IS NULL OR TRIM(P_USER_COMMENT) = '' OR 
        NOT STARTSWITH(UPPER(P_DB_NAME), TENANT)) THEN
            RAISE INVALID_PARAMETERS_EXCEPTION;
    END IF;
    
    --CHECK USERS CURRENT AVAILABLE ROLES [IF SYSADMIN THEN USE SYSADMIN, ELSE LOCAL_SYSADMIN_ROLE]
    
    IF(CONTAINS(REPLACE(CURRENT_AVAILABLE_ROLES(),'_SYSADMIN_ROLE',''),'SYSADMIN')) THEN
        ROLE_NAME := 'SYSADMIN';
    ELSE
        ROLE_NAME := LOCAL_SYSADMIN_ROLE;
    END IF;
    
    JOB_ACTION := UPPER(P_ACTION);

    P_DB_NAME := UPPER(P_DB_NAME);

    --Check if Tenant is part of the framework - Control Table
    TENANT := (SELECT TENANT_ABBREVIATION FROM PLATFORM_DB.PLATFORM_APP.TENANT_LIST WHERE TENANT_ABBREVIATION = :TENANT AND ACTIVE = 'Y');

    IF(TENANT IS NULL) THEN
      RAISE TENANT_EXCEPTION_PARAMETER;
    END IF;

    PERMISSION_EXISTS := (SELECT
        CASE        
            WHEN EXISTS (SELECT 1 FROM PLATFORM_DB.PLATFORM_APP.SP_CONTROL CTL 
                INNER JOIN PLATFORM_DB.PLATFORM_APP.SP_LIST L ON L.SP_ID = CTL.SP_ID 
            WHERE CTL.ADMIN_ROLE = :ROLE_NAME AND L.SP_NAME = 'DATABASE_WRAPPER' AND L.SP_ACTION = :JOB_ACTION) THEN 1
        ELSE 0
    END AS PERMISSION_EXISTS);


    -- DROP DATABASE
    IF (JOB_ACTION = 'DROP' AND PERMISSION_EXISTS = 1) THEN
       LOG := (CALL PLATFORM_DB.PROVISION_ROUTINE.DROP_DATABASE_SQL_PROC(:P_DB_NAME,:P_USER_COMMENT,:TENANT));
       LOG_AGG := LOG_AGG || LOG[1];
      IF(LOG[0]='1') THEN 
        RAISE ACTION_EXCEPTION;
      END IF;
    SP_RETURN_LOG := 'DROPPED DATABASE :' || P_DB_NAME;
    ELSE
       IS_ERROR := '1';
       LOG_AGG := LOG_AGG || 'INVALID ACTION';
    END IF;
    
     RETURN_LOG := OBJECT_CONSTRUCT('tenant',:TENANT,'job_name',:JOB_NAME, 'job_log_description',:SP_RETURN_LOG, 'is_error', :IS_ERROR, 'action', :JOB_ACTION);
    CALL PLATFORM_DB.PROVISION_ROUTINE.LOG_JOB_DETAILS(OBJECT_CONSTRUCT('tenant',:TENANT,'job_name',:JOB_NAME, 'job_log_description',:LOG_AGG, 'is_error', :IS_ERROR, 'action', :JOB_ACTION));
    
    RETURN RETURN_LOG;

EXCEPTION
  WHEN INVALID_PARAMETERS_EXCEPTION  THEN
      IS_ERROR := '1';
      LOG_AGG := LOG_AGG || ' ERROR: INVALID PARAMETERS' ;
      RETURN_LOG := OBJECT_CONSTRUCT('tenant',:TENANT,'job_name',:JOB_NAME, 'job_log_description',:LOG_AGG, 'is_error', :IS_ERROR, 'action', :JOB_ACTION);
      CALL PLATFORM_DB.PROVISION_ROUTINE.LOG_JOB_DETAILS(:RETURN_LOG);
      RETURN RETURN_LOG;

  WHEN TENANT_EXCEPTION_PARAMETER  THEN
      IS_ERROR := '1';
      LOG_AGG := LOG_AGG || ' ERROR: COULD NOT RESOLVE TENANT' ;
      RETURN_LOG := OBJECT_CONSTRUCT('tenant',:TENANT,'job_name',:JOB_NAME, 'job_log_description',:LOG_AGG, 'is_error', :IS_ERROR, 'action', :JOB_ACTION);
      CALL PLATFORM_DB.PROVISION_ROUTINE.LOG_JOB_DETAILS(:RETURN_LOG);
      RETURN RETURN_LOG;
   
   WHEN ACTION_EXCEPTION  THEN
      IS_ERROR := '1';
      RETURN_LOG := OBJECT_CONSTRUCT('tenant',:TENANT,'job_name',:JOB_NAME, 'job_log_description',:LOG_AGG, 'is_error', :IS_ERROR, 'action', :JOB_ACTION);
      CALL PLATFORM_DB.PROVISION_ROUTINE.LOG_JOB_DETAILS(:RETURN_LOG);
      RETURN RETURN_LOG;
      
  WHEN OTHER THEN
      IS_ERROR := '1';
      LOG_AGG := LOG_AGG ||'SQLCODE:' || SQLCODE || ' SQLERRM:' || SQLERRM || ' SQLSTATE:' ||SQLSTATE || LOG_AGG;
      RETURN_LOG := OBJECT_CONSTRUCT('tenant',:TENANT,'job_name',:JOB_NAME, 'job_log_description',:LOG_AGG, 'is_error', :IS_ERROR, 'action', :JOB_ACTION);
      CALL PLATFORM_DB.PROVISION_ROUTINE.LOG_JOB_DETAILS(:RETURN_LOG);
      RETURN RETURN_LOG;
END;
$$;

GRANT USAGE ON PROCEDURE PLATFORM_DB.PROVISION_ROUTINE.DATABASE_WRAPPER(VARCHAR,VARCHAR,VARCHAR,VARCHAR)TO ROLE PLATFORM_DB_PROVISION_ROUTINE_USAGE_ROLE;