USE ROLE SYSADMIN;

CREATE or REPLACE PROCEDURE PLATFORM_DB.PROVISION_ROUTINE.DROP_DATABASE_SQL_PROC (
        DB_NAME VARCHAR,
        COMMENT VARCHAR,
        TENANT_NAME_PARAMETER VARCHAR)

RETURNS ARRAY  NOT NULL
LANGUAGE SQL
EXECUTE AS   OWNER
AS
$$
DECLARE

    TENANT VARCHAR DEFAULT '';
    JOB_NAME VARCHAR DEFAULT '';
    JOB_ACTION VARCHAR DEFAULT '';
    IS_ERROR VARCHAR DEFAULT '0';
    DATABASE_SQL VARCHAR DEFAULT '';
    JOB_LOG_DESCRIPTION VARCHAR DEFAULT '';
    DB_EXCEPTION_PARAMETER EXCEPTION;

    LOG VARIANT DEFAULT '';

BEGIN
    JOB_NAME := 'DATABASE_WRAPPER';
    JOB_ACTION := 'DROP';
    TENANT := TENANT_NAME_PARAMETER;

    IF (DB_NAME IS NOT NULL AND STARTSWITH(DB_NAME,TENANT) and ENDSWITH(DB_NAME,'_DB') ) THEN
      DATABASE_SQL := 'DROP DATABASE IF EXISTS '|| DB_NAME  ;
      EXECUTE IMMEDIATE DATABASE_SQL;
      
      JOB_LOG_DESCRIPTION :=  '-- DATABASE DROPPED: ' || DB_NAME ||' COMMENT: ' || COMMENT || ' DROP_SQL: \n' || DATABASE_SQL;
      RETURN ARRAY_CONSTRUCT(:IS_ERROR,:JOB_LOG_DESCRIPTION)  ;
      
    ELSE
        RAISE DB_EXCEPTION_PARAMETER;
    END IF;
EXCEPTION

  WHEN DB_EXCEPTION_PARAMETER  THEN
    IS_ERROR := '1';
    JOB_LOG_DESCRIPTION := 'ERROR: INVALID NAMING CONVENTION ' ||DB_NAME || ' COMMENT: ' || COMMENT;
    RETURN ARRAY_CONSTRUCT(:IS_ERROR,:JOB_LOG_DESCRIPTION)  ; 

  WHEN OTHER THEN
    IS_ERROR := '1';
    JOB_LOG_DESCRIPTION := 'SQLCODE:' || SQLCODE || ' SQLERRM:' || SQLERRM || ' SQLSTATE:' ||SQLSTATE;
    RETURN ARRAY_CONSTRUCT(:IS_ERROR,:JOB_LOG_DESCRIPTION)  ;
END;
$$;




