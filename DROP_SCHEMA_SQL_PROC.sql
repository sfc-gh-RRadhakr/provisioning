USE ROLE SYSADMIN  ;

CREATE OR REPLACE PROCEDURE PLATFORM_DB.PROVISION_ROUTINE.DROP_SCHEMA_SQL_PROC (
                DATABASENAME_PARAMETER VARCHAR,
                SCHEMANAME_PARAMETER VARCHAR,
                COMMENT_PARAMETER VARCHAR,
                TENANT_NAME_PARAMETER VARCHAR 
                )

RETURNS ARRAY NOT NULL
LANGUAGE SQL
EXECUTE AS OWNER
AS
$$
DECLARE
   TENANT VARCHAR DEFAULT '';
   JOB_NAME VARCHAR DEFAULT '';
   JOB_ACTION VARCHAR DEFAULT '';
   IS_ERROR VARCHAR DEFAULT '0';
   JOB_LOG_DESCRIPTION VARCHAR DEFAULT '';
   SCHEMA_NAME_EXCEPTION EXCEPTION;

   LOG VARIANT DEFAULT '';

    SCHEMA_SQL VARCHAR DEFAULT '';
    SCHEMA_TYPE  VARCHAR DEFAULT '';

BEGIN
    IS_ERROR := '0';
    TENANT := TENANT_NAME_PARAMETER;
    EXECUTE IMMEDIATE 'DROP SCHEMA IF EXISTS '|| DATABASENAME_PARAMETER || '.' || SCHEMANAME_PARAMETER ;
    JOB_LOG_DESCRIPTION :=  '-- SCHEMA DROPPED: '|| DATABASENAME_PARAMETER || '.' || SCHEMANAME_PARAMETER || ' COMMENT: ' ||  COMMENT_PARAMETER || '\n' || 'DROP SCHEMA '|| DATABASENAME_PARAMETER || '.' || SCHEMANAME_PARAMETER || ';';

    RETURN ARRAY_CONSTRUCT(:IS_ERROR,:JOB_LOG_DESCRIPTION)  ;
  
EXCEPTION
  
  WHEN SCHEMA_NAME_EXCEPTION  THEN
    IS_ERROR := '1';
    JOB_LOG_DESCRIPTION := 'ERROR: INVALID SCHEMA' ;
      RETURN ARRAY_CONSTRUCT(:IS_ERROR,:JOB_LOG_DESCRIPTION)  ;
  WHEN OTHER THEN
      IS_ERROR := '1';
      JOB_LOG_DESCRIPTION := 'SQLCODE:' || SQLCODE || ' SQLERRM:' || SQLERRM || ' SQLSTATE:' ||SQLSTATE;
      RETURN ARRAY_CONSTRUCT(:IS_ERROR,:JOB_LOG_DESCRIPTION)  ;

END;
$$;
