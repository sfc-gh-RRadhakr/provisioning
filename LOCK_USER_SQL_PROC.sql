
USE ROLE SECURITYADMIN;
drop procedure if exists PLATFORM_DB.PROVISION_ROUTINE.LOCK_USER_SQL_PROC (VARCHAR,VARCHAR);


USE ROLE SYSADMIN;

CREATE or REPLACE PROCEDURE  PLATFORM_DB.PROVISION_ROUTINE.LOCK_USER_SQL_PROC(
        P_USER_NAME VARCHAR,
        P_TICKET_NUMBER VARCHAR
        )
RETURNS ARRAY NOT NULL
LANGUAGE SQL
EXECUTE AS   OWNER
AS
$$
DECLARE
    IS_ERROR VARCHAR DEFAULT '0';
    JOB_LOG_DESCRIPTION VARCHAR DEFAULT '';
    USER_SQL VARCHAR DEFAULT '';
    TICKET_TAG VARCHAR DEFAULT '';
    TICKET_NUMBER_EXCEPTION_PARAMETER EXCEPTION;
    RETURN_LOG VARIANT DEFAULT '';
    NEW_COMMENT VARCHAR DEFAULT '';
BEGIN

    IS_ERROR := '0';

    IF (P_TICKET_NUMBER IS NULL OR TRIM(P_TICKET_NUMBER) = '') THEN
        RAISE TICKET_NUMBER_EXCEPTION_PARAMETER;
    ELSE
     TICKET_TAG := 'TICKET#:' || P_TICKET_NUMBER;
    END IF;

    USER_SQL :=  'ALTER USER ' || P_USER_NAME || ' SET DISABLED  = TRUE';
    EXECUTE IMMEDIATE USER_SQL;

    JOB_LOG_DESCRIPTION := '--' ||P_USER_NAME || ' DISABLED: TRUE';
    RETURN ARRAY_CONSTRUCT(:IS_ERROR,:JOB_LOG_DESCRIPTION)  ;

EXCEPTION
  WHEN TICKET_NUMBER_EXCEPTION_PARAMETER  THEN
      IS_ERROR := '1';
      JOB_LOG_DESCRIPTION := 'ERROR: INVALID TICKET NUMBER PARAMETER' ;
      RETURN ARRAY_CONSTRUCT(:IS_ERROR,:JOB_LOG_DESCRIPTION)  ;

  WHEN OTHER THEN
    IS_ERROR := '1';
    JOB_LOG_DESCRIPTION := 'SQLCODE:' || SQLCODE || ' SQLERRM:' || SQLERRM || ' SQLSTATE:' ||SQLSTATE;
    RETURN ARRAY_CONSTRUCT(:IS_ERROR,:JOB_LOG_DESCRIPTION)  ;

END;
$$;

grant ownership on procedure PLATFORM_DB.PROVISION_ROUTINE.LOCK_USER_SQL_PROC (VARCHAR,VARCHAR) to ROLE SECURITYADMIN;

USE ROLE SECURITYADMIN;
grant USAGE on procedure PLATFORM_DB.PROVISION_ROUTINE.LOCK_USER_SQL_PROC (VARCHAR,VARCHAR) to ROLE SYSADMIN;
