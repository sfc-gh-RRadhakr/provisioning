
USE ROLE SECURITYADMIN;
DROP PROCEDURE IF EXISTS PLATFORM_DB.PROVISION_ROUTINE.REVOKE_ROLE_FROM_USER_SQL_PROC (VARCHAR,VARCHAR,VARCHAR,VARCHAR);


USE ROLE SYSADMIN;

CREATE or REPLACE PROCEDURE  PLATFORM_DB.PROVISION_ROUTINE.REVOKE_ROLE_FROM_USER_SQL_PROC(
  P_ROLE_NAME               VARCHAR
 ,P_USER_NAME               VARCHAR
 ,P_USER_COMMENT            VARCHAR
 ,P_TENANT_NAME             VARCHAR
)
RETURNS ARRAY  NOT NULL
LANGUAGE SQL
EXECUTE AS   OWNER
AS
$$
DECLARE

    TENANT VARCHAR DEFAULT '';
    JOB_NAME VARCHAR DEFAULT '';
    JOB_ACTION VARCHAR DEFAULT '';
    IS_ERROR VARCHAR DEFAULT '0';
    JOB_LOG_DESCRIPTION VARCHAR DEFAULT '';
    ROLE_NAME_EXCEPTION EXCEPTION;
    LOG VARIANT DEFAULT '';
    GRANT_SQL VARCHAR DEFAULT '';
    V_COUNTER INTEGER DEFAULT 0;


BEGIN
    IS_ERROR := '0';
    TENANT := UPPER(P_TENANT_NAME);
    LET ROLES_LIST ARRAY := SPLIT(P_ROLE_NAME,',');

    WHILE(V_COUNTER < ARRAY_SIZE(ROLES_LIST)) DO
            IF (STARTSWITH(TRIM(ROLES_LIST[V_COUNTER]), TENANT) AND ENDSWITH(TRIM(ROLES_LIST[V_COUNTER]), '_ROLE')) THEN
                GRANT_SQL:= ' REVOKE ROLE ' ||   ROLES_LIST[V_COUNTER] || ' FROM USER ' || P_USER_NAME || '; ';
                EXECUTE IMMEDIATE GRANT_SQL;
                JOB_LOG_DESCRIPTION := JOB_LOG_DESCRIPTION ||  GRANT_SQL;
            V_COUNTER := V_COUNTER + 1;
            ELSE 
                RAISE ROLE_NAME_EXCEPTION;
            END IF;
        END WHILE;

        JOB_LOG_DESCRIPTION := '-- GRANT EXECUTED COMMENT: ' || P_USER_COMMENT || ' GRANT_SQL: \n'||JOB_LOG_DESCRIPTION;

        RETURN ARRAY_CONSTRUCT(:IS_ERROR,:JOB_LOG_DESCRIPTION)  ;

EXCEPTION

  WHEN ROLE_NAME_EXCEPTION  THEN
    IS_ERROR := '1';
    JOB_LOG_DESCRIPTION := 'ERROR: NOT AUTHORIZED TO REVOKE THE GRANT' ; ;
    RETURN ARRAY_CONSTRUCT(:IS_ERROR,:JOB_LOG_DESCRIPTION)  ;


  WHEN OTHER THEN
    IS_ERROR := '1';
    JOB_LOG_DESCRIPTION := 'SQLCODE:' || SQLCODE || ' SQLERRM:' || SQLERRM || ' SQLSTATE:' ||SQLSTATE;
    RETURN ARRAY_CONSTRUCT(:IS_ERROR,:JOB_LOG_DESCRIPTION)  ;

END;
$$;


GRANT OWNERSHIP ON PROCEDURE PLATFORM_DB.PROVISION_ROUTINE.REVOKE_ROLE_FROM_USER_SQL_PROC (VARCHAR,VARCHAR,VARCHAR,VARCHAR) TO ROLE SECURITYADMIN;

USE ROLE SECURITYADMIN;
--DROP PROCEDURE PLATFORM_DB.PROVISION_ROUTINE.REVOKE_ROLE_FROM_USER_SQL_PROC (VARCHAR,VARCHAR,VARCHAR,VARCHAR);
GRANT USAGE ON PROCEDURE PLATFORM_DB.PROVISION_ROUTINE.REVOKE_ROLE_FROM_USER_SQL_PROC (VARCHAR,VARCHAR,VARCHAR,VARCHAR) TO ROLE SYSADMIN;

