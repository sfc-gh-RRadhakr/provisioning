/*
Database as PRODUCT :
KP_WIS —>   DATABSE /TENANT
    STAGE   — > Schema 
    ENRICHED — > Schema 
    CURATED  — > Schema 

Schema  as PRODUCT :

CIDE_BOM  -->TENANT
    CIDE_BOM_STAGE_DB   -->  Database 
        -- SCHEMAS
    CIDE_BOM_ENRICHED_DB -->  Database 
        -- SCHEMAS
    CIDE_BOMCURATED _DB  -->  Database 
        -- SCHEMAS

*/

---   Schema  as PRODUCT : Call the TENANT_SETUP_WRAPPER to set the Tenant for KP_WIS
USE ROLE SYSADMIN;
CALL PLATFORM_DB.PROVISION_ROUTINE.TENANT_SETUP_WRAPPER('KP_WIS','KP Wisconsin','SCHEMA');
--  Check if the Tenant is added 
SELECT * FROM PLATFORM_DB.PROVISION_APP.TENANT_LIST;

-- SET V_TENANT_ABBREVIATION = 'KP_WIS';
-- SET V_SCHEMA_OBJECT_TYPE = 'STAGE';  ---  THIS NEEDS TO BE REPLACE WITH SCHEMA TYPE STAGE, ENRICHED , CURATED 
-- SET V_DATABASETYPENAME = 'ALL';  -- ALL means database as product 
-- SET V_SCHEMASHORTNAME = '';
-- SET V_SchemaTypeName= iff($V_DATABASETYPENAME='ALL','',$V_DATABASETYPENAME) || $V_SCHEMA_OBJECT_TYPE;
-- SET V_TENANT_ID = (SELECT TENANT_ID FROM PLATFORM_DB.PROVISION_APP.TENANT_LIST WHERE TENANT_ABBREVIATION = $V_TENANT_ABBREVIATION);

 /************* OR   ******************/

---  Database as PRODUCT :  Call the TENANT_SETUP_WRAPPER to set the Tenant for CIDE_BOM
USE ROLE SYSADMIN;
CALL PLATFORM_DB.PROVISION_ROUTINE.TENANT_SETUP_WRAPPER('CIDE_BOM','CIDE_BOM','DATABASE');
--  Check if the Tenant is added 
SELECT * FROM PLATFORM_DB.PROVISION_APP.TENANT_LIST;

-- SET V_TENANT_ABBREVIATION = 'CIDE_BOM';
-- SET V_SCHEMA_OBJECT_TYPE = 'SEMANTIC';
-- SET V_DATABASETYPENAME = 'SEMANTIC';
-- SET V_SCHEMASHORTNAME = '';   
-- SET V_SchemaTypeName=   $V_SCHEMA_OBJECT_TYPE;


/**********************   

   Meta Data setup  KP_WIS
   - Add Role Types _MAIN_ROLE , _DML_ROLE , _READ_ROLE
   - Add privliages to the role types

************************/

-- Check if DATABASETYPE has 'ALL'
--SELECT * FROM PLATFORM_DB.PROVISION_APP.DATABASETYPE
SET V_TENANT_ABBREVIATION = 'KP_WIS';
SET V_SCHEMA_OBJECT_TYPE = 'STAGE';  ---  THIS NEEDS TO BE REPLACE WITH SCHEMA TYPE STAGE, ENRICHED , CURATED 
SET V_DATABASETYPENAME = 'ALL';  -- ALL means database as product 
SET V_SCHEMASHORTNAME = '';
SET V_SchemaTypeName= iff($V_DATABASETYPENAME='ALL','',$V_DATABASETYPENAME) || $V_SCHEMA_OBJECT_TYPE;
SET V_TENANT_ID = (SELECT TENANT_ID FROM PLATFORM_DB.PROVISION_APP.TENANT_LIST WHERE TENANT_ABBREVIATION = $V_TENANT_ABBREVIATION);
--- Make sure that Tenant IDs are po
SELECT $V_DATABASETYPENAME, $V_TENANT_ABBREVIATION, $V_SchemaTypeName,$V_SCHEMA_OBJECT_TYPE, $V_TENANT_ID, $V_SCHEMASHORTNAME;


---- SCHEMA_TYPE Add schema 
INSERT INTO PLATFORM_DB.PROVISION_APP.SCHEMA_TYPE(DATABASETYPEID,SCHEMATYPENAME, SCHEMASHORTNAME, TENANT_ID)
WITH DATABASETYPE_LIST AS (
   SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DATABASETYPE WHERE DATABASETYPENAME=$V_DATABASETYPENAME
)
SELECT DATABASETYPEID, $V_SchemaTypeName,$V_SCHEMASHORTNAME, $V_TENANT_ID
FROM DATABASETYPE_LIST;


---  Building out the Role matrix.  These roles can be customized
INSERT INTO PLATFORM_DB.PROVISION_APP.ROLE_MATRIX(DatabaseTypeID,SCHEMA_TYPEID,ROLENAME_TYPE, TENANT_ID )
WITH DatabaseType_list as (
   SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME=$V_DATABASETYPENAME
),
Schema_Type_list as ( SELECT SCHEMA_TYPEID FROM PLATFORM_DB.PROVISION_APP.Schema_Type
                     WHERE SchemaTypeName= $V_SchemaTypeName
                    AND TENANT_ID = $V_TENANT_ID)
SELECT DATABASETYPEID,SCHEMA_TYPEID,'_MAIN_ROLE', $V_TENANT_ID  FROM DatabaseType_list,Schema_Type_list
UNION
SELECT DATABASETYPEID,SCHEMA_TYPEID,'_DML_ROLE', $V_TENANT_ID  FROM DatabaseType_list,Schema_Type_list
UNION
SELECT DATABASETYPEID,SCHEMA_TYPEID,'_READ_ROLE', $V_TENANT_ID  FROM DatabaseType_list,Schema_Type_list;

/* *** Building out Privileges_matrix  *****
Seed data must be populated in the steps {4_Provisioning.sql}
ROLENAME_TYPE name should be changed if it is customized in the previous step.

*/

/*  _MAIN_ROLE  */
--USAGE
INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
WITH DatabaseType_list as (
   SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME=$V_DATABASETYPENAME
),
Schema_Type_list as (
SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
WHERE SchemaTypeName= $V_SchemaTypeName AND
 S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = $V_TENANT_ID) ,
 
Role_matrix_list as (
SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_MAIN_ROLE' AND R.TENANT_ID = $V_TENANT_ID)
 
SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, $V_TENANT_ID FROM
Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
PRIVILEGE in ('USAGE') and ON_TAG in ('DATABASE','SCHEMA');

--grant create table on schema to main role
INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
WITH DatabaseType_list as (
   SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME = $V_DATABASETYPENAME
),
Schema_Type_list as (
SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
WHERE SchemaTypeName= $V_SchemaTypeName AND
 S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = $V_TENANT_ID),
Role_matrix_list as (
SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_MAIN_ROLE' AND R.TENANT_ID = $V_TENANT_ID)
SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, $V_TENANT_ID FROM
Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
PRIVILEGE in ('CREATE TABLE', 'CREATE VIEW', 'CREATE FUNCTION', 'CREATE PROCEDURE', 'CREATE PIPE', 'CREATE STREAM', 'CREATE TASK', 'CREATE FILE FORMAT', 'CREATE SEQUENCE', 'CREATE STAGE','CREATE MATERIALIZED VIEW') and ON_TAG in ('SCHEMA')  ;

-- grant DELETE, INSERT,  SELECT, TRUNCATE, UPDATE - TABLES (CURRENT & FUTURE) to main role
INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
WITH DatabaseType_list as (
   SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME = $V_DATABASETYPENAME
),
Schema_Type_list as (
SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
WHERE SchemaTypeName= $V_SchemaTypeName AND
 S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = $V_TENANT_ID),
Role_matrix_list as (
SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_MAIN_ROLE' AND R.TENANT_ID = $V_TENANT_ID)
SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, $V_TENANT_ID FROM
Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
PRIVILEGE in ('DELETE','INSERT','SELECT','TRUNCATE','UPDATE') and ON_TAG in ('ALL TABLES','FUTURE TABLES');

--MAIN ROLE - USAGE ON FUNCTIONS, PROCEDURES, SEQUENCE, STATE
INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
WITH DatabaseType_list as (
   SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME = $V_DATABASETYPENAME
),
Schema_Type_list as (
SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
WHERE SchemaTypeName= $V_SchemaTypeName  AND
 S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = $V_TENANT_ID),
Role_matrix_list as (
SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_MAIN_ROLE' AND R.TENANT_ID = $V_TENANT_ID)
SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, $V_TENANT_ID FROM
Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
PRIVILEGE in ('USAGE') and ON_TAG in ('ALL FILE FORMATS', 'FUTURE FILE FORMATS', 'ALL SEQUENCES', 'FUTURE SEQUENCES', 'ALL STAGES','FUTURE STAGES', 'ALL FUNCTIONS','FUTURE FUNCTIONS', 'ALL PROCEDURES', 'FUTURE PROCEDURES');

--SELECT streams
INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
WITH DatabaseType_list as (
   SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME = $V_DATABASETYPENAME
),
Schema_Type_list as (
SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
WHERE SchemaTypeName= $V_SchemaTypeName AND
 S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = $V_TENANT_ID),
Role_matrix_list as (
SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_MAIN_ROLE' AND R.TENANT_ID = $V_TENANT_ID)
SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, $V_TENANT_ID FROM
Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
PRIVILEGE in ('SELECT') and ON_TAG in ('ALL VIEWS','FUTURE VIEWS','ALL STREAMS','FUTURE STREAMS');


--OPERATE ON PIPES streams
--Bulk grant is not allowed on pipes - as of yet  - 'ALL PIPES','FUTURE PIPES',
--below command is not ran
--OPERATE ON  streams
INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
WITH DatabaseType_list as (
   SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME = $V_DATABASETYPENAME
),
Schema_Type_list as (
SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
WHERE SchemaTypeName=$V_SchemaTypeName AND
 S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = $V_TENANT_ID),
Role_matrix_list as (
SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_MAIN_ROLE' AND R.TENANT_ID = $V_TENANT_ID)
SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, $V_TENANT_ID FROM
Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
PRIVILEGE in ('OPERATE') and ON_TAG in ('ALL TASKS','FUTURE TASKS');


--SELECT on MATERIALIZED VIEWS
INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
WITH DatabaseType_list as (
   SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME = $V_DATABASETYPENAME
),
Schema_Type_list as (
SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
WHERE SchemaTypeName= $V_SchemaTypeName AND
 S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = $V_TENANT_ID),
Role_matrix_list as (
SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_MAIN_ROLE' AND R.TENANT_ID = $V_TENANT_ID)
SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, $V_TENANT_ID FROM
Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
PRIVILEGE in ('SELECT') and ON_TAG in ('ALL MATERIALIZED VIEWS','FUTURE MATERIALIZED VIEWS');



--OWNERSHIP
INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
WITH DatabaseType_list as (
   SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME = $V_DATABASETYPENAME
),
Schema_Type_list as (
SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
WHERE SchemaTypeName= $V_SchemaTypeName AND
 S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = $V_TENANT_ID),
Role_matrix_list as (
SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_MAIN_ROLE' AND R.TENANT_ID = $V_TENANT_ID)
SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, $V_TENANT_ID FROM
Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
PRIVILEGE in ('OWNERSHIP') and ON_TAG in (
'ALL TABLES','FUTURE TABLES',
'ALL VIEWS','FUTURE VIEWS',
'ALL FUNCTIONS','FUTURE FUNCTIONS',
'ALL PROCEDURES','FUTURE PROCEDURES',
'ALL PIPES','FUTURE PIPES',
'ALL STREAMS','FUTURE STREAMS',
'ALL FILE FORMATS','FUTURE FILE FORMATS',
'ALL SEQUENCES','FUTURE SEQUENCES',
'ALL STAGES','FUTURE STAGES',
'ALL TASKS','FUTURE TASKS',
'ALL MATERIALIZED VIEWS','FUTURE MATERIALIZED VIEWS'
);

/*  DML ROLE   */
---USAGE
INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
WITH DatabaseType_list as (
   SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME=$V_DATABASETYPENAME
),
Schema_Type_list as (
SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
WHERE SchemaTypeName= $V_SchemaTypeName AND
 S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = $V_TENANT_ID),
Role_matrix_list as (
SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_DML_ROLE' AND R.TENANT_ID = $V_TENANT_ID)
SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, $V_TENANT_ID FROM
Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
PRIVILEGE in ('USAGE') and ON_TAG in ('DATABASE','SCHEMA');


-- grant DELETE, INSERT,  SELECT, TRUNCATE, UPDATE - TABLES (CURRENT & FUTURE) to main role
INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
WITH DatabaseType_list as (
   SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME = $V_DATABASETYPENAME
),
Schema_Type_list as (
SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
WHERE SchemaTypeName= $V_SchemaTypeName AND
 S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = $V_TENANT_ID),
Role_matrix_list as (
SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_DML_ROLE' AND R.TENANT_ID = $V_TENANT_ID)
SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, $V_TENANT_ID FROM
Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
PRIVILEGE in ('DELETE','INSERT','SELECT','TRUNCATE','UPDATE') and ON_TAG in ('ALL TABLES','FUTURE TABLES');


--- USAGE ON FUNCTIONS, PROCEDURES, SEQUENCE, STATE
INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
WITH DatabaseType_list as (
   SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME = $V_DATABASETYPENAME
),
Schema_Type_list as (
SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
WHERE SchemaTypeName= $V_SchemaTypeName AND
 S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = $V_TENANT_ID),
Role_matrix_list as (
SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_DML_ROLE' AND R.TENANT_ID = $V_TENANT_ID)
SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, $V_TENANT_ID FROM
Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
PRIVILEGE in ('USAGE') and ON_TAG in ('ALL FILE FORMATS', 'FUTURE FILE FORMATS', 'ALL SEQUENCES', 'FUTURE SEQUENCES', 'ALL STAGES','FUTURE STAGES', 'ALL FUNCTIONS','FUTURE FUNCTIONS', 'ALL PROCEDURES', 'FUTURE PROCEDURES');

INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
WITH DatabaseType_list as (
   SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME = $V_DATABASETYPENAME
),
Schema_Type_list as (
SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
WHERE SchemaTypeName= $V_SchemaTypeName AND
 S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = $V_TENANT_ID),
Role_matrix_list as (
SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_DML_ROLE' AND R.TENANT_ID = $V_TENANT_ID)
SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, $V_TENANT_ID FROM
Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
PRIVILEGE in ('SELECT') and ON_TAG in ('ALL VIEWS','FUTURE VIEWS','ALL STREAMS','FUTURE STREAMS');

--OPERATE ON streams
--Bulk grant is not allowed on pipes - as of yet  - 'ALL PIPES','FUTURE PIPES',
--below command is not ran
--OPERATE ON  streams
INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
WITH DatabaseType_list as (
   SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME = $V_DATABASETYPENAME
),
Schema_Type_list as (
SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
WHERE SchemaTypeName= $V_SchemaTypeName AND
 S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = $V_TENANT_ID),
Role_matrix_list as (
SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_DML_ROLE' AND R.TENANT_ID = $V_TENANT_ID)
SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, $V_TENANT_ID FROM
Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
PRIVILEGE in ('OPERATE') and ON_TAG in ('ALL TASKS','FUTURE TASKS');


INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
WITH DatabaseType_list as (
   SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME = $V_DATABASETYPENAME
),
Schema_Type_list as (
SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
WHERE SchemaTypeName= $V_SchemaTypeName AND
 S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = $V_TENANT_ID),
Role_matrix_list as (
SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_DML_ROLE' AND R.TENANT_ID = $V_TENANT_ID)
SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, $V_TENANT_ID FROM
Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
PRIVILEGE in ('SELECT') and ON_TAG in ('ALL MATERIALIZED VIEWS','FUTURE MATERIALIZED VIEWS');


/* READ ROLE   */
INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
WITH DatabaseType_list as (
   SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME=$V_DATABASETYPENAME
),
Schema_Type_list as (
SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
WHERE SchemaTypeName= $V_SchemaTypeName AND
 S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = $V_TENANT_ID),
Role_matrix_list as (
SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_READ_ROLE' AND R.TENANT_ID = $V_TENANT_ID)
SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, $V_TENANT_ID FROM
Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
PRIVILEGE in ('USAGE') and ON_TAG in ('DATABASE','SCHEMA');

-- grant DELETE, INSERT,  SELECT, TRUNCATE, UPDATE - TABLES (CURRENT & FUTURE) to main role
INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
WITH DatabaseType_list as (
   SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME = $V_DATABASETYPENAME
),
Schema_Type_list as (
SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
WHERE SchemaTypeName= $V_SchemaTypeName AND
 S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = $V_TENANT_ID),
Role_matrix_list as (
SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_READ_ROLE' AND R.TENANT_ID = $V_TENANT_ID)
SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, $V_TENANT_ID FROM
Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
PRIVILEGE in ('SELECT') and ON_TAG in ('ALL TABLES','FUTURE TABLES');

--MAIN ROLE - USAGE ON FUNCTIONS, PROCEDURES, SEQUENCE, STATE
INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
WITH DatabaseType_list as (
   SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME = $V_DATABASETYPENAME
),
Schema_Type_list as (
SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
WHERE SchemaTypeName= $V_SchemaTypeName AND
 S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = $V_TENANT_ID),
Role_matrix_list as (
SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_READ_ROLE' AND R.TENANT_ID = $V_TENANT_ID)
SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, $V_TENANT_ID FROM
Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
PRIVILEGE in ('USAGE') and ON_TAG in ('ALL FILE FORMATS', 'FUTURE FILE FORMATS', 'ALL SEQUENCES', 'FUTURE SEQUENCES', 'ALL STAGES','FUTURE STAGES', 'ALL FUNCTIONS','FUTURE FUNCTIONS', 'ALL PROCEDURES', 'FUTURE PROCEDURES');


--SELECT streams
INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
WITH DatabaseType_list as (
   SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME = $V_DATABASETYPENAME
),
Schema_Type_list as (
SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
WHERE SchemaTypeName= $V_SchemaTypeName AND
 S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = $V_TENANT_ID),
Role_matrix_list as (
SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_READ_ROLE' AND R.TENANT_ID = $V_TENANT_ID)
SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, $V_TENANT_ID FROM
Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
PRIVILEGE in ('SELECT') and ON_TAG in ('ALL VIEWS','FUTURE VIEWS','ALL STREAMS','FUTURE STREAMS');




--OPERATE ON streams
--Bulk grant is not allowed on pipes - as of yet  - 'ALL PIPES','FUTURE PIPES',
--below command is not ran
--OPERATE ON  streams

INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
WITH DatabaseType_list as (
   SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME = $V_DATABASETYPENAME
),
Schema_Type_list as (
SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
WHERE SchemaTypeName= $V_SchemaTypeName AND
 S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = $V_TENANT_ID),
Role_matrix_list as (
SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_READ_ROLE' AND R.TENANT_ID = $V_TENANT_ID)
SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, $V_TENANT_ID FROM
Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
PRIVILEGE in ('MONITOR') and ON_TAG in ('ALL TASKS','FUTURE TASKS');


INSERT INTO PLATFORM_DB.PROVISION_APP.Privileges_matrix(ROLETYPE_ID,DATABASETYPEID,SCHEMA_TYPEID,PRIVILEGEID, TENANT_ID)
WITH DatabaseType_list as (
   SELECT DATABASETYPEID FROM PLATFORM_DB.PROVISION_APP.DatabaseType WHERE DATABASETYPENAME = $V_DATABASETYPENAME
),
Schema_Type_list as (
SELECT S.SCHEMA_TYPEID,S.DATABASETYPEID FROM  PLATFORM_DB.PROVISION_APP.Schema_Type S INNER JOIN DatabaseType_list D
WHERE SchemaTypeName= $V_SchemaTypeName AND
 S.DATABASETYPEID=D.DATABASETYPEID AND TENANT_ID = $V_TENANT_ID),
Role_matrix_list as (
SELECT R.* FROM Schema_Type_list S INNER JOIN PLATFORM_DB.PROVISION_APP.ROLE_MATRIX R on R.SCHEMA_TYPEID=S.SCHEMA_TYPEID
and S.DATABASETYPEID=R.DATABASETYPEID and R.ROLENAME_TYPE='_READ_ROLE' AND R.TENANT_ID = $V_TENANT_ID)
SELECT R.ROLETYPE_ID,R.DATABASETYPEID,R.SCHEMA_TYPEID,P.PRIVILEGEID, $V_TENANT_ID FROM
Role_matrix_list R, PLATFORM_DB.PROVISION_APP.Privilege_Mapping P where
PRIVILEGE in ('SELECT') and ON_TAG in ('ALL MATERIALIZED VIEWS','FUTURE MATERIALIZED VIEWS');



