CREATE OR REPLACE PROCEDURE PLATFORM_DB.PROVISION_ROUTINE.TENANT_SETUP_WRAPPER(
    P_TENANT_ID                             VARCHAR,
    P_TENANT_NAME                           VARCHAR,
    P_DATA_PRODUCT_TYPE                     VARCHAR 
)

RETURNS VARIANT  NOT NULL
LANGUAGE SQL
EXECUTE AS OWNER
AS
$$

DECLARE
    JOB_NAME VARCHAR DEFAULT '';
    TENANT VARCHAR DEFAULT '';
    JOB_ACTION VARCHAR DEFAULT '';
    ROLE_SQL VARCHAR DEFAULT '';
    IS_ERROR VARCHAR DEFAULT '';
    JOB_LOG_DESCRIPTION VARCHAR DEFAULT '';
    TENANT_EXCEPTION_PARAMETER EXCEPTION;
    WRAPPER_EXCEPTION EXCEPTION;
    INVALID_PARAMETERS_EXCEPTION EXCEPTION;
    LOG_AGG VARCHAR DEFAULT '';
    RETURN_LOG VARIANT DEFAULT '';

    SYSADMIN_SUFFIX VARCHAR DEFAULT '_SYSADMIN_ROLE';
    LOCAL_SYSADMIN_ROLE VARCHAR DEFAULT '';
    ROLE_NAME VARCHAR DEFAULT '';
    SP_RETURN_LOG VARCHAR DEFAULT '';
    PERMISSION_EXISTS INTEGER DEFAULT 0;
    LOG ARRAY  DEFAULT [];

    LOGS VARCHAR DEFAULT '';
    CURSOR_RESULT ARRAY DEFAULT [];
    TENANT_SQL VARCHAR DEFAULT '';
     
BEGIN

    JOB_NAME := 'TENANT_SETUP_WRAPPER';
    JOB_ACTION := 'CREATE';
    IS_ERROR := '0';
    P_TENANT_NAME := UPPER(P_TENANT_NAME);
    P_TENANT_ID := UPPER(P_TENANT_ID);
    P_DATA_PRODUCT_TYPE := UPPER(P_DATA_PRODUCT_TYPE);

    IF(P_TENANT_NAME IS NULL OR TRIM(P_TENANT_NAME) ='') THEN
        RAISE TENANT_EXCEPTION_PARAMETER;
    END IF;
    
    IF(P_TENANT_ID IS NULL OR TRIM(P_TENANT_ID) ='') THEN
        RAISE TENANT_EXCEPTION_PARAMETER;
    END IF;
       
    PERMISSION_EXISTS := (SELECT
        CASE        
            WHEN EXISTS (SELECT 1 FROM PLATFORM_DB.PROVISION_APP.TENANT_LIST 
               WHERE TENANT_ABBREVIATION = :P_TENANT_ID  AND ACTIVE = 'Y') THEN 1
        ELSE 0
    END AS PERMISSION_EXISTS);


    IF( PERMISSION_EXISTS = 1) THEN
         UPDATE PLATFORM_DB.PROVISION_APP.TENANT_LIST SET TENANT_NAME= :P_TENANT_NAME  , P_DATA_PRODUCT_TYPE = :P_DATA_PRODUCT_TYPE WHERE 
         TENANT_ABBREVIATION = :P_TENANT_ID  AND ACTIVE = 'Y';
         SP_RETURN_LOG := SP_RETURN_LOG || ' TENANT UPDATED: ' || P_TENANT_ID || ', ';
    ELSE
        LOCAL_SYSADMIN_ROLE := P_TENANT_ID || SYSADMIN_SUFFIX;
        ROLE_NAME := LOCAL_SYSADMIN_ROLE; 
        -- Make entry into TENANT 
        INSERT INTO PLATFORM_DB.PROVISION_APP.TENANT_LIST(TENANT_ABBREVIATION,TENANT_NAME,ACTIVE,PRIORITY_NO,DATA_PRODUCT_TYPE)
        VALUES( :P_TENANT_ID,:P_TENANT_NAME,'Y',1,:P_DATA_PRODUCT_TYPE );
        SP_RETURN_LOG := SP_RETURN_LOG || ' TENANT CREATED: ' || P_TENANT_ID || ', ';
        -- Create TENANT ADMIN ROLE
        ROLE_SQL :=  'CREATE ROLE IF NOT EXISTS ' ||ROLE_NAME;
        EXECUTE IMMEDIATE ROLE_SQL;
        EXECUTE IMMEDIATE 'GRANT ROLE '|| ROLE_NAME ||' TO ROLE ' || 'SYSADMIN';
        EXECUTE IMMEDIATE 'GRANT OWNERSHIP ON ROLE '||  ROLE_NAME || 'TO ROLE SECURITYADMIN REVOKE CURRENT GRANTS';
        SP_RETURN_LOG := SP_RETURN_LOG || ' TENANT ADMIIN ROLE CREATED: ' || ROLE_NAME || ', ';

    END IF;
    RETURN_LOG := OBJECT_CONSTRUCT('tenant',:TENANT,'job_name',:JOB_NAME, 'job_log_description',:SP_RETURN_LOG, 'is_error', :IS_ERROR, 'action', :JOB_ACTION);
    CALL PLATFORM_DB.PROVISION_ROUTINE.LOG_JOB_DETAILS(OBJECT_CONSTRUCT('tenant',:TENANT,'job_name',:JOB_NAME, 'job_log_description',:SP_RETURN_LOG, 'is_error', :IS_ERROR, 'action', :JOB_ACTION));

    RETURN RETURN_LOG;

EXCEPTION
  
  WHEN INVALID_PARAMETERS_EXCEPTION  THEN
      IS_ERROR := '1';
      JOB_LOG_DESCRIPTION := 'ERROR: INVALID PARAMETERS' ;
      RETURN_LOG := OBJECT_CONSTRUCT('tenant',:TENANT,'job_name',:JOB_NAME, 'job_log_description',:JOB_LOG_DESCRIPTION, 'is_error', :IS_ERROR, 'action', :JOB_ACTION);
      CALL PLATFORM_DB.PROVISION_ROUTINE.LOG_JOB_DETAILS(:RETURN_LOG);
      RETURN RETURN_LOG;

  WHEN TENANT_EXCEPTION_PARAMETER  THEN
      IS_ERROR := '1';
      JOB_LOG_DESCRIPTION := 'ERROR: COULD NOT RESOLVE TENANT' ;
      RETURN_LOG := OBJECT_CONSTRUCT('tenant',:TENANT,'job_name',:JOB_NAME, 'job_log_description',:JOB_LOG_DESCRIPTION, 'is_error', :IS_ERROR, 'action', :JOB_ACTION);
      CALL PLATFORM_DB.PROVISION_ROUTINE.LOG_JOB_DETAILS(:RETURN_LOG);
      RETURN RETURN_LOG;
  
  WHEN WRAPPER_EXCEPTION  THEN
      IS_ERROR := '1';
      JOB_LOG_DESCRIPTION := 'ERROR: WRAPPER FAILED TENANT ALREADY EXISTS' || LOG_AGG ;
      RETURN_LOG := OBJECT_CONSTRUCT('tenant',:TENANT,'job_name',:JOB_NAME, 'job_log_description',:JOB_LOG_DESCRIPTION, 'is_error', :IS_ERROR, 'action', :JOB_ACTION);
      CALL PLATFORM_DB.PROVISION_ROUTINE.LOG_JOB_DETAILS(:RETURN_LOG);
      RETURN RETURN_LOG;

  WHEN OTHER THEN
      IS_ERROR := '1';
      JOB_LOG_DESCRIPTION := 'SQLCODE:' || SQLCODE || ' SQLERRM:' || SQLERRM || ' SQLSTATE:' ||SQLSTATE || LOG_AGG;
      RETURN_LOG := OBJECT_CONSTRUCT('tenant',:TENANT,'job_name',:JOB_NAME, 'job_log_description',:JOB_LOG_DESCRIPTION, 'is_error', :IS_ERROR, 'action', :JOB_ACTION);
      CALL PLATFORM_DB.PROVISION_ROUTINE.LOG_JOB_DETAILS(:RETURN_LOG);
      RETURN RETURN_LOG;
END;
$$;

GRANT USAGE ON PROCEDURE PLATFORM_DB.PROVISION_ROUTINE.TENANT_SETUP_WRAPPER(
    VARCHAR,VARCHAR,VARCHAR ) TO ROLE PLATFORM_DB_PROVISION_ROUTINE_USAGE_ROLE;
 

 ---  TESTING 
 CALL PLATFORM_DB.PROVISION_ROUTINE.TENANT_SETUP_WRAPPER('KP_HI2','KP TEST 22 HAWAI','DATABASE');
 CALL PLATFORM_DB.PROVISION_ROUTINE.TENANT_SETUP_WRAPPER('KP_HI','KP HAWAI','SCHEMA');
 
 