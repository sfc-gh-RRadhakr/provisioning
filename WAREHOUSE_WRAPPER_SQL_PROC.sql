/*
     Warehouse Wrapper:
     Create Action:
     1: Creates the Warehouse
     2: Creates Warehouse Role
     3: Grants Usage on Warehouse to Warehouse Role
     4: Resource Monitor Attach
*/
USE ROLE SYSADMIN;
CREATE OR REPLACE PROCEDURE PLATFORM_DB.PROVISION_ROUTINE.WAREHOUSE_WRAPPER(
    P_ACTION VARCHAR,//1
    P_WH_NAME VARCHAR,//2
    P_WH_COMMENT VARCHAR,//3
    P_USER_COMMENT VARCHAR,//4
    P_WH_SIZE VARCHAR,//5
    P_MAX_CLUSTERS VARCHAR,//6
    P_MIN_CLUSTERS VARCHAR,//7
    P_SCALING_POLICY VARCHAR,//8
    P_AUTO_SUSPEND_IN_SECONDS VARCHAR,//9
    P_STATEMENT_TIMEOUT_IN_SECONDS VARCHAR,//10
    P_RESOURCE_MONITOR VARCHAR,//11
    P_STATEMENT_QUEUED_TIMEOUT_IN_SECONDS VARCHAR,  //12
    P_TENANT_NAME VARCHAR //13
)

RETURNS VARIANT  NOT NULL
LANGUAGE SQL
EXECUTE AS OWNER
AS
$$

DECLARE
    JOB_NAME VARCHAR DEFAULT '';
    JOB_ACTION VARCHAR DEFAULT '';
    TENANT VARCHAR DEFAULT '';
    IS_ERROR VARCHAR DEFAULT '';
    JOB_LOG_DESCRIPTION VARCHAR DEFAULT '';
    TENANT_EXCEPTION_PARAMETER EXCEPTION;
    WRAPPER_EXCEPTION EXCEPTION;
    INVALID_PARAMETERS_EXCEPTION EXCEPTION;
    ACTION_EXCEPTION EXCEPTION;
   
    SYSADMIN_SUFFIX VARCHAR DEFAULT '_SYSADMIN_ROLE';
    LOCAL_SYSADMIN_ROLE VARCHAR DEFAULT '';
    ROLE_NAME VARCHAR DEFAULT '';
    PERMISSION_EXISTS INTEGER DEFAULT 0;
    SP_RETURN_LOG VARCHAR DEFAULT '';

    
    LOG_AGG VARCHAR DEFAULT '';
    RETURN_LOG VARIANT DEFAULT '';
    LOG ARRAY DEFAULT [];
    LOGS VARCHAR DEFAULT '';

    ACCESS_ROLE VARCHAR DEFAULT '';
BEGIN
    JOB_NAME := 'WAREHOUSE_WRAPPER';
    IS_ERROR := '0';
    
    IF(P_TENANT_NAME IS NULL OR TRIM(P_TENANT_NAME) ='') THEN
        RAISE TENANT_EXCEPTION_PARAMETER;
    END IF;
    
    TENANT := UPPER(P_TENANT_NAME);

    LOCAL_SYSADMIN_ROLE := TENANT || SYSADMIN_SUFFIX;

    IF (
        P_ACTION IS NULL OR TRIM(P_ACTION) = '' OR
        P_WH_NAME IS NULL OR TRIM(P_WH_NAME) = '' OR 
        P_WH_COMMENT IS NULL OR TRIM(P_WH_COMMENT) = '' OR 
        P_USER_COMMENT IS NULL OR TRIM(P_USER_COMMENT) = '' OR 
        P_WH_SIZE IS NULL OR TRIM(P_WH_SIZE) = '' OR 
        P_MAX_CLUSTERS IS NULL OR TRIM(P_MAX_CLUSTERS) = '' OR 
        P_MIN_CLUSTERS IS NULL OR TRIM(P_MIN_CLUSTERS) = '' OR
        NOT IS_ROLE_IN_SESSION(LOCAL_SYSADMIN_ROLE) OR
        NOT STARTSWITH(P_WH_NAME, TENANT)
        --OR 
        --MONITOR IS NULL OR TRIM(MONITOR) ='' OR
        --NOT STARTSWITH(MONITOR,TENANT) OR NOT ENDSWITH(MONITOR,'RM')
       ) THEN
        RAISE INVALID_PARAMETERS_EXCEPTION;
    END IF;
   
    --CHECK USER'S CURRENT AVAILABLE ROLES [IF SYSADMIN THEN USE SYSADMIN, ELSE LOCAL_SYSADMIN_ROLE]
    
    IF(CONTAINS(REPLACE(CURRENT_AVAILABLE_ROLES(),SYSADMIN_SUFFIX,''),'SYSADMIN')) THEN
        ROLE_NAME := 'SYSADMIN';
    ELSE
        ROLE_NAME := LOCAL_SYSADMIN_ROLE;
    END IF;
    
    JOB_ACTION := UPPER(P_ACTION);

    -- Check if Tenant is part of the framework - Control Table
    TENANT := (SELECT TENANT_ABBREVIATION FROM PLATFORM_DB.PROVISION_APP.TENANT_LIST WHERE TENANT_ABBREVIATION = :TENANT AND ACTIVE = 'Y');

    IF(TENANT IS NULL) THEN
      RAISE TENANT_EXCEPTION_PARAMETER;
    END IF;

    PERMISSION_EXISTS := (SELECT
        CASE        
            WHEN EXISTS (SELECT 1 FROM PLATFORM_DB.PROVISION_APP.SP_CONTROL CTL 
                INNER JOIN PLATFORM_DB.PROVISION_APP.SP_LIST L ON L.SP_ID = CTL.SP_ID 
            WHERE CTL.ADMIN_ROLE = :ROLE_NAME AND L.SP_NAME = 'WAREHOUSE_WRAPPER' AND L.SP_ACTION = :JOB_ACTION) THEN 1
        ELSE 0
    END AS PERMISSION_EXISTS);

    -- CREATE WAREHOUSE
    IF (JOB_ACTION = 'CREATE' AND PERMISSION_EXISTS = 1) THEN
       LOG := (CALL PLATFORM_DB.PROVISION_ROUTINE.CREATE_WAREHOUSE_SQL_PROC(:P_WH_NAME,:P_WH_COMMENT,:P_USER_COMMENT,:P_WH_SIZE,:P_MAX_CLUSTERS,:P_MIN_CLUSTERS,:P_SCALING_POLICY,:P_AUTO_SUSPEND_IN_SECONDS,:P_STATEMENT_TIMEOUT_IN_SECONDS,:P_STATEMENT_QUEUED_TIMEOUT_IN_SECONDS,:TENANT));
       LOG_AGG := LOG_AGG || LOG[1];
       
       -- Error Check
        IF(LOG[0] = '1') THEN
            IS_ERROR := '1';
            RAISE WRAPPER_EXCEPTION;
        END IF;
        SP_RETURN_LOG := ' CREATED WAREHOUSE : ' || P_WH_NAME || ', ';
      -- CREATE ROLE WH_ROLE
       ACCESS_ROLE := P_WH_NAME || '_ROLE';
       LOG := (CALL PLATFORM_DB.PROVISION_ROUTINE.CREATE_ROLE_SQL_PROC(:ACCESS_ROLE, :TENANT));
       LOG_AGG := LOG_AGG || LOG[1] || '\n';

      -- Error Check
        IF(LOG[0] = '1') THEN
            IS_ERROR := '1';
            RAISE WRAPPER_EXCEPTION;
        END IF;
        
      -- GRANT USAGE ON WAREHOUSE MAPS_ADHOC_WH TO ROLE MAPS_ADHOC_WH_ROLE ;
       LOG := (CALL PLATFORM_DB.PROVISION_ROUTINE.GRANT_USAGE_WAREHOUSE_SQL_PROC(:ACCESS_ROLE,:P_WH_NAME,:TENANT));
       LOG_AGG := LOG_AGG || LOG[1] || '\n';
      
      -- Error Check
        IF(LOG[0] = '1') THEN
            IS_ERROR := '1';
            RAISE WRAPPER_EXCEPTION;
        END IF;
        
        LET MONITOR_ROLE VARCHAR := '';
        -- _CORE_ETL_VWH, _SEMANTIC_VWH, _REPL_VWH, _ADHOC_VWH, _DATA_ENG_VWH
        
        IF(ENDSWITH(P_WH_NAME,'_CORE_ETL_VWH') OR ENDSWITH(P_WH_NAME,'_SEMANTIC_VWH') OR ENDSWITH(P_WH_NAME,'_REPL_VWH')) THEN
            MONITOR_ROLE := TENANT || '_ETL_MONITOR_READ_ROLE';

        ELSEIF(ENDSWITH(P_WH_NAME,'_ADHOC_VWH') OR ENDSWITH(P_WH_NAME,'_DATA_ENG_VWH')) THEN
            MONITOR_ROLE := TENANT || '_ADHOC_MONITOR_READ_ROLE';

        ELSE
            MONITOR_ROLE := TENANT || '_OTHER_MONITOR_READ_ROLE';
        END IF;

        -- Create Monitor Role
        LOG := (CALL PLATFORM_DB.PROVISION_ROUTINE.CREATE_ROLE_SQL_PROC(:MONITOR_ROLE, :TENANT));
        
        LOG_AGG := LOG_AGG || LOG[1] || '\n';
        -- Error Check
        IF(LOG[0] = '1') THEN
            IS_ERROR := '1';
            RAISE WRAPPER_EXCEPTION;
        END IF;

        -- Grant Monitor Role
        LET MONITOR_GRANT VARCHAR := 'GRANT MONITOR ON WAREHOUSE ' || P_WH_NAME || ' TO ROLE ' || MONITOR_ROLE || ';';
        LOG := (CALL PLATFORM_DB.PROVISION_ROUTINE.GRANT_ROLE_SQL_PROC(:MONITOR_GRANT));  
        
        LOG_AGG := LOG_AGG || LOG[1] || '\n';
      -- Error Check
        IF(LOG[0] = '1') THEN
            IS_ERROR := '1';
            RAISE WRAPPER_EXCEPTION;
        END IF;

      -- ATTACH RESOURCE MONITOR
      LOG := (CALL PLATFORM_DB.PROVISION_ROUTINE.ADD_RESOURCE_MONITOR_WAREHOUSE_SQL_PROC(:P_WH_NAME,:P_RESOURCE_MONITOR,:TENANT));
      LOG_AGG := LOG_AGG || LOG[1] || '\n';

      -- Error Check
        IF(LOG[0] = '1') THEN
            IS_ERROR := '1';
            RAISE WRAPPER_EXCEPTION;
        END IF;

    -- ALTER WAREHOUSE
    ELSEIF (JOB_ACTION = 'ALTER' AND PERMISSION_EXISTS = 1) THEN
      LOG :=  (CALL PLATFORM_DB.PROVISION_ROUTINE.ALTER_WAREHOUSE_SQL_PROC(:P_WH_NAME,:P_WH_COMMENT,:P_USER_COMMENT,:P_WH_SIZE,:P_MAX_CLUSTERS,:P_MIN_CLUSTERS,:P_SCALING_POLICY,:P_AUTO_SUSPEND_IN_SECONDS,:P_STATEMENT_TIMEOUT_IN_SECONDS,:P_RESOURCE_MONITOR,:P_STATEMENT_QUEUED_TIMEOUT_IN_SECONDS,:TENANT));
      LOG_AGG := LOG_AGG || LOG[1];

    -- Error Check
        IF(LOG[0] = '1') THEN
            IS_ERROR := '1';
            RAISE WRAPPER_EXCEPTIOn;
        END IF;
    
    SP_RETURN_LOG := ' WAREHOUSE ALTERED : ' || P_WH_NAME;

    ELSE
       IS_ERROR := '1';
       LOG_AGG := LOG_AGG || 'INVALID ACTION';
       RAISE INVALID_PARAMETERS_EXCEPTION;
    END IF;
    
    RETURN_LOG := OBJECT_CONSTRUCT('tenant',:TENANT,'job_name',:JOB_NAME, 'job_log_description',:SP_RETURN_LOG, 'is_error', :IS_ERROR, 'action', :JOB_ACTION);
    CALL PLATFORM_DB.PROVISION_ROUTINE.LOG_JOB_DETAILS(OBJECT_CONSTRUCT('tenant',:TENANT,'job_name',:JOB_NAME, 'job_log_description',:LOG_AGG, 'is_error', :IS_ERROR, 'action', :JOB_ACTION));
    
    RETURN RETURN_LOG;

EXCEPTION
  WHEN INVALID_PARAMETERS_EXCEPTION  THEN
      IS_ERROR := '1';
      LOG_AGG := LOG_AGG || ' ERROR: INVALID PARAMETERS' ;
      RETURN_LOG := OBJECT_CONSTRUCT('tenant',:TENANT,'job_name',:JOB_NAME, 'job_log_description',:LOG_AGG, 'is_error', :IS_ERROR, 'action', :JOB_ACTION);
      CALL PLATFORM_DB.PROVISION_ROUTINE.LOG_JOB_DETAILS(:RETURN_LOG);
      RETURN RETURN_LOG;

  WHEN TENANT_EXCEPTION_PARAMETER  THEN
      IS_ERROR := '1';
      LOG_AGG := LOG_AGG || ' ERROR: COULD NOT RESOLVE TENANT' ;
      RETURN_LOG := OBJECT_CONSTRUCT('tenant',:TENANT,'job_name',:JOB_NAME, 'job_log_description',:LOG_AGG, 'is_error', :IS_ERROR, 'action', :JOB_ACTION);
      CALL PLATFORM_DB.PROVISION_ROUTINE.LOG_JOB_DETAILS(:RETURN_LOG);
      RETURN RETURN_LOG;
   
   WHEN WRAPPER_EXCEPTIOn  THEN
      IS_ERROR := '1';
      RETURN_LOG := OBJECT_CONSTRUCT('tenant',:TENANT,'job_name',:JOB_NAME, 'job_log_description',:LOG_AGG, 'is_error', :IS_ERROR, 'action', :JOB_ACTION);
      CALL PLATFORM_DB.PROVISION_ROUTINE.LOG_JOB_DETAILS(:RETURN_LOG);
      RETURN RETURN_LOG;
      
  WHEN OTHER THEN
      IS_ERROR := '1';
      LOG_AGG := LOG_AGG ||'SQLCODE:' || SQLCODE || ' SQLERRM:' || SQLERRM || ' SQLSTATE:' ||SQLSTATE || LOG_AGG;
      RETURN_LOG := OBJECT_CONSTRUCT('tenant',:TENANT,'job_name',:JOB_NAME, 'job_log_description',:LOG_AGG, 'is_error', :IS_ERROR, 'action', :JOB_ACTION);
      CALL PLATFORM_DB.PROVISION_ROUTINE.LOG_JOB_DETAILS(:RETURN_LOG);
      RETURN RETURN_LOG;

END;
$$;




GRANT USAGE ON PROCEDURE PLATFORM_DB.PROVISION_ROUTINE.WAREHOUSE_WRAPPER(VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR) TO ROLE PLATFORM_DB_PROVISION_ROUTINE_USAGE_ROLE;

-------------
/*
     Warehouse Wrapper:
     Drop Action:
     1: Drops the Warehouse
     2: Drops the warehouse role
*/

USE ROLE SYSADMIN;
CREATE OR REPLACE PROCEDURE PLATFORM_DB.PROVISION_ROUTINE.WAREHOUSE_WRAPPER(
    P_ACTION VARCHAR,//1
    P_WH_NAME VARCHAR,//2
    P_USER_COMMENT VARCHAR, //3
    P_TENANT_NAME VARCHAR
)

RETURNS VARIANT  NOT NULL
LANGUAGE SQL
EXECUTE AS OWNER
AS
$$

DECLARE
    JOB_NAME VARCHAR;
    JOB_ACTION VARCHAR;
    TENANT VARCHAR DEFAULT '';
    IS_ERROR VARCHAR;
    JOB_LOG_DESCRIPTION VARCHAR DEFAULT '';
    TENANT_EXCEPTION_PARAMETER EXCEPTION;
    WRAPPER_EXCEPTION EXCEPTION;
    INVALID_PARAMETERS_EXCEPTION EXCEPTION;
    ACTION_EXCEPTION EXCEPTION;
    
    SYSADMIN_SUFFIX VARCHAR DEFAULT '_SYSADMIN_ROLE';
    LOCAL_SYSADMIN_ROLE VARCHAR;
    ROLE_NAME VARCHAR DEFAULT '';
    PERMISSION_EXISTS INTEGER;
    SP_RETURN_LOG VARCHAR DEFAULT '';

    LOG_AGG VARCHAR DEFAULT '';
    RETURN_LOG VARIANT;
    LOG ARRAY;
    LOGS VARCHAR DEFAULT '';

    ACCESS_ROLE VARCHAR DEFAULT '';

BEGIN
    JOB_NAME := 'WAREHOUSE_WRAPPER';
    IS_ERROR := '0';
    
    IF(P_TENANT_NAME IS NULL OR TRIM(P_TENANT_NAME) ='') THEN
        RAISE TENANT_EXCEPTION_PARAMETER;
    END IF;
    
    TENANT := UPPER(P_TENANT_NAME);
    
    LOCAL_SYSADMIN_ROLE := TENANT || SYSADMIN_SUFFIX;
    
    IF (
        P_ACTION IS NULL OR TRIM(P_ACTION) = '' OR
        P_WH_NAME IS NULL OR TRIM(P_WH_NAME) = '' OR
        NOT IS_ROLE_IN_SESSION(LOCAL_SYSADMIN_ROLE) OR
        NOT STARTSWITH(P_WH_NAME, TENANT)) THEN
        RAISE INVALID_PARAMETERS_EXCEPTION;
    END IF;
    
    --CHECK USER'S CURRENT AVAILABLE ROLES [IF SYSADMIN THEN USE SYSADMIN, ELSE LOCAL_SYSADMIN_ROLE]
    IF(CONTAINS(REPLACE(CURRENT_AVAILABLE_ROLES(),SYSADMIN_SUFFIX,''),'SYSADMIN')) THEN
        ROLE_NAME := 'SYSADMIN';
    ELSE
        ROLE_NAME := LOCAL_SYSADMIN_ROLE;
    END IF;
    
    JOB_ACTION := UPPER(P_ACTION);

    //Check if Tenant is part of the framework - Control Table
    TENANT := (SELECT TENANT_ABBREVIATION FROM PLATFORM_DB.PROVISION_APP.TENANT_LIST WHERE TENANT_ABBREVIATION = :TENANT AND ACTIVE = 'Y');

    IF(TENANT IS NULL) THEN
      RAISE TENANT_EXCEPTION_PARAMETER;
    END IF;

    PERMISSION_EXISTS := (SELECT
        CASE        
            WHEN EXISTS (SELECT 1 FROM PLATFORM_DB.PROVISION_APP.SP_CONTROL CTL 
                INNER JOIN PLATFORM_DB.PROVISION_APP.SP_LIST L ON L.SP_ID = CTL.SP_ID 
            WHERE CTL.ADMIN_ROLE = :ROLE_NAME AND L.SP_NAME = 'WAREHOUSE_WRAPPER' AND L.SP_ACTION = :JOB_ACTION) THEN 1
        ELSE 0
    END AS PERMISSION_EXISTS);

    // DROP WAREHOUSE
    IF (JOB_ACTION = 'DROP' AND PERMISSION_EXISTS = 1) THEN
      // DROP WH ROLE
      ACCESS_ROLE := P_WH_NAME || '_ROLE';
      LOG := (CALL PLATFORM_DB.PROVISION_ROUTINE.DROP_ROLE_SQL_PROC(:ACCESS_ROLE,:TENANT));
      LOG_AGG := LOG_AGG || LOG[1] || '\n';
          IF(LOG[0] = '1') THEN
            IS_ERROR := '1';
            RAISE WRAPPER_EXCEPTIOn;
        END IF;
      SP_RETURN_LOG := SP_RETURN_LOG || ' ROLE DROPPED: ' || ACCESS_ROLE || ', ';
      LOG := (CALL PLATFORM_DB.PROVISION_ROUTINE.DROP_WAREHOUSE_SQL_PROC(:P_WH_NAME,:TENANT));
      LOG_AGG := LOG_AGG || LOG[1] || '\n';
          IF(LOG[0] = '1') THEN
            IS_ERROR := '1';
            RAISE WRAPPER_EXCEPTIOn;
        END IF;
    SP_RETURN_LOG := SP_RETURN_LOG || ' WAREHOUSE DROPPED: ' || P_WH_NAME || ', ';
    ELSE
       IS_ERROR := '1';
       LOG_AGG := LOG_AGG || 'INVALID ACTION';
       RAISE INVALID_PARAMETERS_EXCEPTION;
    END IF;
    
    RETURN_LOG := OBJECT_CONSTRUCT('tenant',:TENANT,'job_name',:JOB_NAME, 'job_log_description',:SP_RETURN_LOG, 'is_error', :IS_ERROR, 'action', :JOB_ACTION);
    CALL PLATFORM_DB.PROVISION_ROUTINE.LOG_JOB_DETAILS(OBJECT_CONSTRUCT('tenant',:TENANT,'job_name',:JOB_NAME, 'job_log_description',:LOG_AGG, 'is_error', :IS_ERROR, 'action', :JOB_ACTION));
    
    RETURN RETURN_LOG;

EXCEPTION
  WHEN INVALID_PARAMETERS_EXCEPTION  THEN
      IS_ERROR := '1';
      LOG_AGG := LOG_AGG || ' ERROR: INVALID PARAMETERS' ;
      RETURN_LOG := OBJECT_CONSTRUCT('tenant',:TENANT,'job_name',:JOB_NAME, 'job_log_description',:LOG_AGG, 'is_error', :IS_ERROR, 'action', :JOB_ACTION);
      CALL PLATFORM_DB.PROVISION_ROUTINE.LOG_JOB_DETAILS(:RETURN_LOG);
      RETURN RETURN_LOG;

  WHEN TENANT_EXCEPTION_PARAMETER  THEN
      IS_ERROR := '1';
      LOG_AGG := LOG_AGG || ' ERROR: COULD NOT RESOLVE TENANT' ;
      RETURN_LOG := OBJECT_CONSTRUCT('tenant',:TENANT,'job_name',:JOB_NAME, 'job_log_description',:LOG_AGG, 'is_error', :IS_ERROR, 'action', :JOB_ACTION);
      CALL PLATFORM_DB.PROVISION_ROUTINE.LOG_JOB_DETAILS(:RETURN_LOG);
      RETURN RETURN_LOG;
   
   WHEN WRAPPER_EXCEPTIOn  THEN
      IS_ERROR := '1';
      RETURN_LOG := OBJECT_CONSTRUCT('tenant',:TENANT,'job_name',:JOB_NAME, 'job_log_description',:LOG_AGG, 'is_error', :IS_ERROR, 'action', :JOB_ACTION);
      CALL PLATFORM_DB.PROVISION_ROUTINE.LOG_JOB_DETAILS(:RETURN_LOG);
      RETURN RETURN_LOG;
      
  WHEN OTHER THEN
      IS_ERROR := '1';
      LOG_AGG := LOG_AGG ||'SQLCODE:' || SQLCODE || ' SQLERRM:' || SQLERRM || ' SQLSTATE:' ||SQLSTATE || LOG_AGG;
      RETURN_LOG := OBJECT_CONSTRUCT('tenant',:TENANT,'job_name',:JOB_NAME, 'job_log_description',:LOG_AGG, 'is_error', :IS_ERROR, 'action', :JOB_ACTION);
      CALL PLATFORM_DB.PROVISION_ROUTINE.LOG_JOB_DETAILS(:RETURN_LOG);
      RETURN RETURN_LOG;
END;
$$;

GRANT USAGE ON PROCEDURE PLATFORM_DB.PROVISION_ROUTINE.WAREHOUSE_WRAPPER(VARCHAR,VARCHAR,VARCHAR,VARCHAR) TO ROLE PLATFORM_DB_PROVISION_ROUTINE_USAGE_ROLE;

